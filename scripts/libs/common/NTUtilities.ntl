/* =====================================================
 *
 * NTUtilities.ntl , a utility function call script
 *
 * Any original code is licensed under the BSD license
 * All code written since the fork of this is licensed under the GPL
 * Please see COPYING for details
 *
 * Copyright (c) 2014, Benson's Network Technolygy Company.
 * Copyright (c) 1976-2014 Benson's Network Technolygy Company.
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * NTUtilities.ntl, 一個工具功能呼叫腳本
 *
 * 任何原代碼在BSD許可證下授權
 * 自本次寫的所有代碼以GPL許可
 * 請參閱COPYING的詳細信息
 *
 * 版權所有(c) 2014年, Benson's Network Technolygy Company.
 * 版權所有(c) 1976至2014 Benson's Network Technolygy Company.
 * 保留所有權利。
 *
 * 本程序是自由軟件：您可以重新分配和/或修改
 * 它根據GNU通用公共許可證的條款發表
 * 自由軟件基金會，無論是版本3的使用授權，或
 * (由你選擇) 任何更新的版本。
 *
 * 本程序分發的目的是希望它有用，
 * 但"沒有任何擔保"; 甚至沒有暗示的保證
 * 適銷性或針對特定用途。請參閱
 * GNU通用公共許可證以獲得更多細節。
 * 你應該已經收到一份GNU通用公共許可證的副本
 * 隨著這一計劃。如果不是，請參閱<http://www.gnu.org/licenses/>。
 *
===================================================== */

function NTU_CheckMyStats()
{
	var Merc = NTC_GetMerc();
	DiffMod = (me.diff == 1) ? -40 : (me.diff == 2) ? -100 : 0;
    var _endLvl = me.GetStat(12);
    var _endExp = me.GetStat(13);
    if (_endExp < 0 || _endLvl >= 86) { _endExp = (2147483648 + _endExp); }
    if (_endExp < 2147483648 && _endLvl >= 97) { _endExp = (2147483648 + _endExp); }
	Resi = [(me.GetStat(39) + DiffMod), (me.GetStat(43) + DiffMod), (me.GetStat(41) + DiffMod), (me.GetStat(45) + DiffMod)];

	var StatLogMang =  COLOR_3 + me.name + COLOR_2 + " \u5C6C\u6027\u72C0\u614B" + ";";
		StatLogMang += COLOR_3 + me.name + COLOR_1 + "\n--------------------------------" + "\n";
		StatLogMang += COLOR_4 + "\u7B49\u7D1A/\u7D93\u9A57: " + COLOR_2 + me.GetStat(12) + COLOR_4 + "/" + COLOR_8 + addSeparatorsNF(_endExp, ",", ".", ",") + "\n";
		StatLogMang += COLOR_4 + "\u751F\u547D/\u6700\u5927\u503C: " + COLOR_1 + addSeparatorsNF(me.GetStat(6), ",", ".", ",") + COLOR_4 + "/" + COLOR_1 + addSeparatorsNF(me.GetStat(7), ",", ".", ",") + "\n";
		StatLogMang += COLOR_4 + "\u6CD5\u529B/\u6700\u5927\u503C: " + COLOR_3 + me.GetStat(8) + COLOR_4 + "/" + COLOR_3 + me.GetStat(9) + "\n";
		StatLogMang += COLOR_4 + "\u529B\u91CF: (" + COLOR_8 + me.GetStat(0) + COLOR_4 + ") \u654F\u6377: (" + COLOR_8 + me.GetStat(2) + COLOR_4 + ")" + "\n";
		StatLogMang += COLOR_4 + "\u9AD4\u529B: (" + COLOR_8 + me.GetStat(3) + COLOR_4 + ") \u7CBE\u529B: (" + COLOR_8 + me.GetStat(1) + COLOR_4 + ")" + "\n";
		if(Resi[0] != 0) { StatLogMang += COLOR_4 + "\u706B\u7130\u62B5\u6297: " + COLOR_1 + Resi[0] + "\n"; }
		if(Resi[1] != 0) { StatLogMang += COLOR_4 + "\u51B0\u51B7\u62B5\u6297: " + COLOR_3 + Resi[1] + "\n"; }
		if(Resi[2] != 0) { StatLogMang += COLOR_4 + "\u9583\u96FB\u62B5\u6297: " + COLOR_9 + Resi[2] + "\n"; }
		if(Resi[3] != 0) { StatLogMang += COLOR_4 + "\u6BD2\u7D20\u62B5\u6297: " + COLOR_2 + Resi[3] + "\n"; }
		if(me.GetStat(80) > 0) { StatLogMang += COLOR_4 + "\u9B54\u6CD5\u53D6\u5F97\u6A5F\u7387: " + COLOR_8 + me.GetStat(80) + "\n"; }
		if(me.GetStat(79) > 0) { StatLogMang += COLOR_4 + "\u91D1\u9322\u53D6\u5F97\u6A5F\u7387: " + COLOR_8 + me.GetStat(79) + "\n"; }
		if(me.GetStat(105) > 0) { StatLogMang += COLOR_4 + "\u9AD8\u901F\u65BD\u5C55\u901F\u5EA6: " + COLOR_8 + me.GetStat(105) + "\n"; }
		if(me.GetStat(93) > 0) { StatLogMang += COLOR_4 + "\u653B\u64CA\u901F\u5EA6\u63D0\u6607: " + COLOR_8 + me.GetStat(93) + "\n"; }
		if(me.GetStat(99) > 0) { StatLogMang += COLOR_4 + "\u5FEB\u901F\u6253\u64CA\u6062\u5FA9: " + COLOR_8 + me.GetStat(99) + "\n"; }
		if(me.GetStat(136) > 0) { StatLogMang += COLOR_4 + "\u58D3\u788E\u6253\u64CA\u6A5F\u7387: " + COLOR_8 + me.GetStat(136) + "\n"; }
		if(me.GetStat(142) > 0) { StatLogMang += COLOR_4 + "\u81F4\u547D\u653B\u64CA\u6A5F\u7387: " + COLOR_8 + me.GetStat(142) + "\n"; }
		if(me.GetStat(135) > 0) { StatLogMang += COLOR_4 + "\u6495\u958B\u50B7\u53E3\u6A5F\u7387: " + COLOR_8 + me.GetStat(135) + "\n"; }
		if(me.GetStat(60) > 0) { StatLogMang += COLOR_4 + "\u5077\u53D6\u751F\u547D\u6A5F\u7387: " + COLOR_8 + me.GetStat(60) + "\n"; }
		if(me.GetStat(36) > 0) { StatLogMang += COLOR_4 + "\u50B7\u5BB3\u6E1B\u5C11\u6A5F\u7387: " + COLOR_8 + me.GetStat(36) + "\n"; }
		if(me.GetStat(96) > 0) { StatLogMang += COLOR_4 + "\u9AD8\u901F\u8DD1\u6B65\u884C\u8D70: " + COLOR_8 + me.GetStat(96) + "\n"; }
		if(me.GetStat(37) > 0) { StatLogMang += COLOR_4 + "\u6CD5\u8853\u50B7\u5BB3\u6E1B\u5C11\u6A5F\u7387: " + COLOR_8 + me.GetStat(37) + "\n"; }
		if(me.GetStat(20) > 0) { StatLogMang += COLOR_4 + "\u683C\u64CB\u6A5F\u7387: " + COLOR_8 + me.GetStat(20) + "\n"; }
		if(me.GetStat(142 || 143 || 144 || 145 || 146 || 147 || 148 || 149) > 0) { StatLogMang += COLOR_4 + "\u5438\u6536\u4EE5\u767E\u5206\u6BD4\u986F\u793A(\u975C\u614B)" + "\n"; }
		if(me.GetStat(142 || 143) > 0) { StatLogMang += COLOR_4 + "\u706B\u7130\u5438\u6536: " + COLOR_1 + me.GetStat(142) + "(" + me.GetStat(143) + ")" + "\n"; }
		if(me.GetStat(144 || 145) > 0) { StatLogMang += COLOR_4 + "\u9583\u96FB\u5438\u6536: " + COLOR_9 + me.GetStat(144) + "(" + me.GetStat(145) + ")" + "\n"; }
		if(me.GetStat(146 || 147) > 0) { StatLogMang += COLOR_4 + "\u9B54\u6CD5\u5438\u6536: " + COLOR_8 + me.GetStat(146) + "(" + me.GetStat(147) + ")" + "\n"; }
		if(me.GetStat(148 || 149) > 0) { StatLogMang += COLOR_4 + "\u51B0\u51B7\u5438\u6536: " + COLOR_3 + me.GetStat(148) + "(" + me.GetStat(149) + ")" + "\n"; }
		if(me.GetStat(153) == 1) { StatLogMang += COLOR_3 + " \u7121\u6CD5\u51B0\u51CD!" + "\n"; }
		StatLogMang += COLOR_1 + "--------------------------------";
	NTC_SendLogToOOG(NTC_LOG_COMMON, StatLogMang);
	Print(COLOR_2 + "[" + COLOR_3 + me.name + COLOR_2 + "] \u7684\u5C6C\u6027\u72C0\u614B\u5DF2\u767C\u5230\u7BA1\u7406\u5668\u7D00\u9304!");

	var Merc = NTC_GetMerc();
	if(Merc && NTConfig_MercStats){
		var MercResi = [(Merc.GetStat(39) + DiffMod), (Merc.GetStat(43) + DiffMod), (Merc.GetStat(41) + DiffMod), (Merc.GetStat(45) + DiffMod)];
		var MercStatMgr =  COLOR_4 + Merc.name + COLOR_2 + " \u5C6C\u6027\u72C0\u614B (\u50AD\u5175)" + ";";
			MercStatMgr += COLOR_4 + Merc.name + COLOR_1 + "\n--------------------------------" + "\n";
			MercStatMgr += COLOR_4 + "\u7B49\u7D1A/\u7D93\u9A57: " + COLOR_2 + Merc.GetStat(12) + COLOR_4 + "/" + COLOR_8 + addSeparatorsNF(Merc.GetStat(13), ",", ".", ",") + "\n";

			MercStatMgr += COLOR_4 + "\u751F\u547D/\u6700\u5927\u503C: " + COLOR_1 + addSeparatorsNF(Merc.GetStat(6), ",", ".", ",") + COLOR_4 + "/" + COLOR_1 + addSeparatorsNF(Merc.GetStat(7), ",", ".", ",") + "\n";
			MercStatMgr += COLOR_4 + "\u6CD5\u529B/\u6700\u5927\u503C: " + COLOR_3 + Merc.GetStat(8) + COLOR_4 + "/" + COLOR_3 + Merc.GetStat(9) + "\n";
			MercStatMgr += COLOR_4 + "\u529B\u91CF: (" + COLOR_8 + Merc.GetStat(0) + COLOR_4 + ") \u654F\u6377: (" + COLOR_8 + Merc.GetStat(2) + COLOR_4 + ")" + "\n";
			MercStatMgr += COLOR_4 + "\u9AD4\u529B: (" + COLOR_8 + Merc.GetStat(3) + COLOR_4 + ") \u7CBE\u529B: (" + COLOR_8 + Merc.GetStat(1) + COLOR_4 + ")" + "\n";
			if(MercResi[0] != 0) { MercStatMgr += COLOR_4 + "\u706B\u7130\u62B5\u6297: " + COLOR_1 + MercResi[0] + "\n"; }
			if(MercResi[1] != 0) { MercStatMgr += COLOR_4 + "\u51B0\u51B7\u62B5\u6297: " + COLOR_3 + MercResi[1] + "\n"; }
			if(MercResi[2] != 0) { MercStatMgr += COLOR_4 + "\u9583\u96FB\u62B5\u6297: " + COLOR_9 + MercResi[2] + "\n"; }
			if(MercResi[3] != 0) { MercStatMgr += COLOR_4 + "\u6BD2\u7D20\u62B5\u6297: " + COLOR_2 + MercResi[3] + "\n"; }
			if(Merc.GetStat(80) > 0) { MercStatMgr += COLOR_4 + "\u9B54\u6CD5\u53D6\u5F97\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(80) + "\n"; }
			if(Merc.GetStat(79) > 0) { MercStatMgr += COLOR_4 + "\u91D1\u9322\u53D6\u5F97\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(79) + "\n"; }
			if(Merc.GetStat(105) > 0) { MercStatMgr += COLOR_4 + "\u9AD8\u901F\u65BD\u5C55\u901F\u5EA6: " + COLOR_8 + Merc.GetStat(105) + "\n"; }
			if(Merc.GetStat(93) > 0) { MercStatMgr += COLOR_4 + "\u653B\u64CA\u901F\u5EA6\u63D0\u6607: " + COLOR_8 + Merc.GetStat(93) + "\n"; }
			if(Merc.GetStat(99) > 0) { MercStatMgr += COLOR_4 + "\u5FEB\u901F\u6253\u64CA\u6062\u5FA9: " + COLOR_8 + Merc.GetStat(99) + "\n"; }
			if(Merc.GetStat(136) > 0) { MercStatMgr += COLOR_4 + "\u58D3\u788E\u6253\u64CA\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(136) + "\n"; }
			if(Merc.GetStat(142) > 0) { MercStatMgr += COLOR_4 + "\u81F4\u547D\u653B\u64CA\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(142) + "\n"; }
			if(Merc.GetStat(135) > 0) { MercStatMgr += COLOR_4 + "\u6495\u958B\u50B7\u53E3\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(135) + "\n"; }
			if(Merc.GetStat(60) > 0) { MercStatMgr += COLOR_4 + "\u5077\u53D6\u751F\u547D\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(60) + "\n"; }
			if(Merc.GetStat(36) > 0) { MercStatMgr += COLOR_4 + "\u50B7\u5BB3\u6E1B\u5C11\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(36) + "\n"; }
			if(Merc.GetStat(37) > 0) { MercStatMgr += COLOR_4 + "\u6CD5\u8853\u50B7\u5BB3\u6E1B\u5C11\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(37) + "\n"; }
			if(Merc.GetStat(96) > 0) { MercStatMgr += COLOR_4 + "\u9AD8\u901F\u8DD1\u6B65\u884C\u8D70: " + COLOR_8 + Merc.GetStat(96) + "\n"; }
			if(Merc.GetStat(20) > 0) { MercStatMgr += COLOR_4 + "\u683C\u64CB\u6A5F\u7387: " + COLOR_8 + Merc.GetStat(20) + "\n"; }
			if(Merc.GetStat(142 || 143 || 144 || 145 || 146 || 147 || 148 || 149) > 0) { MercStatMgr += COLOR_4 + "\u5438\u6536\u4EE5\u767E\u5206\u6BD4\u986F\u793A(\u975C\u614B)" + "\n"; }

			if(Merc.GetStat(142 || 143) > 0) { MercStatMgr += COLOR_4 + "\u706B\u7130\u5438\u6536: " + COLOR_1 + Merc.GetStat(142) + "(" + Merc.GetStat(143) + ")" + "\n"; }
			if(Merc.GetStat(144 || 145) > 0) { MercStatMgr += COLOR_4 + "\u9583\u96FB\u5438\u6536: " + COLOR_9 + Merc.GetStat(144) + "(" + Merc.GetStat(145) + ")" + "\n"; }
			if(Merc.GetStat(146 || 147) > 0) { MercStatMgr += COLOR_4 + "\u9B54\u6CD5\u5438\u6536: " + COLOR_8 + Merc.GetStat(146) + "(" + Merc.GetStat(147) + ")" + "\n"; }
			if(Merc.GetStat(148 || 149) > 0) { MercStatMgr += COLOR_4 + "\u51B0\u51B7\u5438\u6536: " + COLOR_3 + Merc.GetStat(148) + "(" + Merc.GetStat(149) + ")" + "\n"; }
			if(Merc.GetStat(153) == 1) { MercStatMgr += COLOR_3 + Merc.name + " \u7121\u6CD5\u51B0\u51CD!" + "\n"; }
			MercStatMgr += COLOR_1 + "--------------------------------";
		NTC_SendLogToOOG(NTC_LOG_COMMON, MercStatMgr);
		Print(COLOR_2 + "\u50AD\u5175["+ COLOR_4 + Merc.name + COLOR_2 + "]\u7684\u5C6C\u6027\u72C0\u614B\u5DF2\u767C\u5230\u7BA1\u7406\u5668\u7D00\u9304!");
	}
}
function N_Space(n) {
	var s = "";
	var i = 0;
	for (i = 0; i < n; i++) {
		s += " ";
	}
	return s;
}

function NTU_CheckCoord() {
	_area = GetArea();
	if(_area)

		{
			Print(COLOR_9 + " X=" + me.x + ", Y=" + me.y);
			Print(COLOR_9 + " \u5728\u5730\u5340ID " + me.areaid + " , " + _area.name);

		}
}


function Key_HotList()
{
	HotKeys = COLOR_1 + "\u71B1\u9375\u529F\u80FD\u5217\u8868" + ";";
	HotKeys += COLOR_1 + "\u6240\u6709\u71B1\u9375\u5728\u4F60\u7684\u9375\u76E4\u53F3\u65B9\u7684\u6578\u5B57\u9375\u76E4!" + "\n";
	HotKeys += COLOR_1 + "---------------------------------------------------" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_DropItems) + "]" + COLOR_4 + " \u4E1F\u4E0B\u6240\u6709\u5009\u5EAB\u53CA\u8EAB\u4E0A\u7269\u54C1" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_DevTools) + "]" + COLOR_4 + " \u555F\u7528\u958B\u767C\u5DE5\u5177" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_CoordLog) + "]" + COLOR_4 + " \u8A18\u9304\u76EE\u524D\u5EA7\u6A19\u65B9\u4F4D\u5230\u6A94\u6848"+"\n"+" logs/testlog/yourcharname-Coords" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_HotKeyList) + "]" + COLOR_4 + " \u986F\u793A\u71B1\u9375\u5217\u8868!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_InvTxtLog) + "]" + COLOR_4 + " \u5217\u51FA\u5132\u5B58\u7BB1\u5167\u5BB9\u5230\u8A18\u9304\u6A94" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_CursorILvL) + "]" + COLOR_4 + " \u986F\u793A\u6E38\u6A19\u4F4D\u7F6E\u7684\u7269\u54C1\u7B49\u7D1AiLvl" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_CheckSpace) + "]" + COLOR_4 + " \u6AA2\u67E5\u8EAB\u4E0A\u80CC\u5305\u53CA\u5132\u5B58\u7BB1\u7A7A\u4F4D" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_StatsLog) + "]" + COLOR_4 + " \u767C\u9001\u89D2\u8272\u4EE5\u53CA\u50AD\u5175\u7684\u5C6C\u6027\u72C0\u614B\u5230\u904A\u6232\u7BA1\u7406\u5668" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_NipCheck) + "]" + COLOR_4 + " \u57F7\u884C.NIP\u6A94\u6848\u932F\u8AA4\u6AA2\u67E5\u7A0B\u5E8F" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_CheckBPs) + "]" + COLOR_4 + " \u986F\u793A\u9AD8\u901F\u65BD\u6CD5/\u653B\u64CA\u901F\u5EA6" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_PrintCoord) + "]" + COLOR_4 + " \u986F\u793A\u76EE\u524D\u5340\u57DF\u53CA\u5EA7\u6A19\u65B9\u4F4D" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_PrevScript) + "]" + COLOR_4 + " \u56DE\u5230\u4E0A\u4E00\u500B\u8173\u672C\u7A0B\u5E8F" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_NextScript) + "]" + COLOR_4 + " \u8F49\u5230\u4E0B\u4E00\u500B\u8173\u672C\u7A0B\u5E8F" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_PauseBot) + "]" + COLOR_4 + " \u66AB\u505C/\u6062\u5FA9\u76EE\u524D\u9032\u884C\u8173\u672C" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_GoToTown) + "]" + COLOR_4 + " \u56DE\u5230\u6700\u8FD1\u7684\u57CE\u93AE" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_DoPrecast) + "]" + COLOR_4 + " \u9810\u5148\u505A\u4F60\u7684\u5F37\u5316\u6280\u80FD" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_GameStats) + "]" + COLOR_4 + " \u767C\u9001\u4F60\u7576\u524D\u904A\u6232\u7684\u7D71\u8A08\u5230\u904A\u6232\u7BA1\u7406\u5668." + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_MyChicken) + "]" + COLOR_4 + " \u986F\u793A\u4F60\u7684\u9003\u547D\u6578\u503C HP/MP" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_AntiIdle) + "]" + COLOR_4 + " \u9632\u9592\u7F6E\u529F\u80FD \u958B/\u95DC" + COLOR_1 + "/\u5DF2\u7981\u7528\u65BCBOT\u6A21\u5F0F" +"\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Do_ExitGame) + "]" + COLOR_4 + " \u624B\u52D5\u5F37\u5236\u96E2\u958B\u76EE\u524D\u904A\u6232" + "\n";
	HotKeys += COLOR_1 + "---------------------------------------------------";
	NTC_SendLogToOOG(NTC_LOG_COMMON, HotKeys);
	Print(COLOR_1 + "\u71B1\u9375\u5217\u8868\u5DF2\u50B3\u9001\u5230\u4F60\u7684\u904A\u6232\u7BA1\u7406\u5668!");
}

function WhichHotKey(ThisKey)
{
	switch(ThisKey) {
		case 8: ThisKey = "Backspace"; break;
		case 9: ThisKey = "Tab"; break;
		case 13: ThisKey = "Enter"; break;
		case 16: ThisKey = "Shift"; break;
		case 17: ThisKey = "Ctrl"; break;
		case 18: ThisKey = "Alt"; break;
		case 19: ThisKey = "Pause"; break;
		case 20: ThisKey = "Caps Lock"; break;
		case 27: ThisKey = "Esc"; break;
		case 33: ThisKey = "Pg Up"; break;
		case 34: ThisKey = "Pg Dn"; break;
		case 35: ThisKey = "End"; break;
		case 36: ThisKey = "Home"; break;
		case 45: ThisKey = "Ins"; break;
		case 46: ThisKey = "Del"; break;
		case 48: ThisKey = "0"; break;
		case 49: ThisKey = "1"; break;
		case 50: ThisKey = "2"; break;
		case 51: ThisKey = "3"; break;
		case 52: ThisKey = "4"; break;
		case 53: ThisKey = "5"; break;
		case 54: ThisKey = "6"; break;
		case 55: ThisKey = "7"; break;
		case 56: ThisKey = "8"; break;
		case 57: ThisKey = "9"; break;
		case 65: ThisKey = "A"; break;
		case 66: ThisKey = "B"; break;
		case 67: ThisKey = "C"; break;
		case 68: ThisKey = "D"; break;
		case 69: ThisKey = "E"; break;
		case 70: ThisKey = "F"; break;
		case 71: ThisKey = "G"; break;
		case 72: ThisKey = "H"; break;
		case 73: ThisKey = "I"; break;
		case 74: ThisKey = "J"; break;
		case 75: ThisKey = "K"; break;
		case 76: ThisKey = "L"; break;
		case 77: ThisKey = "M"; break;
		case 78: ThisKey = "N"; break;
		case 79: ThisKey = "O"; break;
		case 80: ThisKey = "P"; break;
		case 81: ThisKey = "Q"; break;
		case 82: ThisKey = "R"; break;
		case 83: ThisKey = "S"; break;
		case 84: ThisKey = "T"; break;
		case 85: ThisKey = "U"; break;
		case 86: ThisKey = "V"; break;
		case 87: ThisKey = "W"; break;
		case 88: ThisKey = "X"; break;
		case 89: ThisKey = "Y"; break;
		case 90: ThisKey = "Z"; break;
		case 96: ThisKey = "Num 0"; break;
		case 97: ThisKey = "Num 1"; break;
		case 98: ThisKey = "Num 2"; break;
		case 99: ThisKey = "Num 3"; break;
		case 100: ThisKey = "Num 4"; break;
		case 101: ThisKey = "Num 5"; break;
		case 102: ThisKey = "Num 6"; break;
		case 103: ThisKey = "Num 7"; break;
		case 104: ThisKey = "Num 8"; break;
		case 105: ThisKey = "Num 9"; break;
		case 106: ThisKey = "Num *"; break;
		case 107: ThisKey = "Num +"; break;
		case 109: ThisKey = "Num -"; break;
		case 110: ThisKey = "Num ."; break;
		case 111: ThisKey = "Num /"; break;
		case 112: ThisKey = "F1"; break;
		case 113: ThisKey = "F2"; break;
		case 114: ThisKey = "F3"; break;
		case 115: ThisKey = "F4"; break;
		case 116: ThisKey = "F5"; break;
		case 117: ThisKey = "F6"; break;
		case 118: ThisKey = "F7"; break;
		case 119: ThisKey = "F8"; break;
		case 120: ThisKey = "F9"; break;
		case 121: ThisKey = "F10"; break;
		case 122: ThisKey = "F11"; break;
		case 123: ThisKey = "F12"; break;
		case 144: ThisKey = "Num Lock"; break;
		case 145: ThisKey = "Scroll Lock"; break;
		case 186: ThisKey = "Semi-Colon"; break;
		case 187: ThisKey = "="; break;
		case 188: ThisKey = "Comma"; break;
		case 189: ThisKey = "-"; break;
		case 190: ThisKey = "Period"; break;
		case 191: ThisKey = "/"; break;
		case 192: ThisKey = "~"; break;
		case 219: ThisKey = "["; break;
		case 220: ThisKey = "BackSlash"; break;
		case 221: ThisKey = "]"; break;
		case 222: ThisKey = "'"; break;
	} return ThisKey;
}

function T_BPsPrint()
{
	CurFCR = me.GetStat(105);
	CurFHR = me.GetStat(99);

	BreakPoints();
	Print(COLOR_4 + me.charname + " (" + COLOR_9 + IdToName() + COLOR_4 + ") \u76EE\u524D\u72C0\u614B BPs!");
	Print(COLOR_4 + "\u9AD8\u901F\u65BD\u5C55\u901F\u5EA6: " + COLOR_8 + CurFCR + COLOR_4 + " / \u5FEB\u901F\u6253\u64CA\u6062\u5FA9: " + COLOR_8 + CurFHR + COLOR_4 + " / \u653B\u64CA\u901F\u5EA6\u63D0\u6607: " + COLOR_8 + CurFHS);
	Print(COLOR_4 + "Frames: " + COLOR_8 + FCRFrm + COLOR_4 + "/" + COLOR_8 + FHRFrm + COLOR_4 + "!");
	if(me.classid == 1) { Print(COLOR_4 + "Lite Frames: " + COLOR_8 + FCRFrmSorc + COLOR_4 + "!"); }
}

function BreakPoints()
{
	switch(me.classid) {
		case 0:
			FCRFrm = (CurFCR >= 152) ? "11" : (CurFCR >= 99) ? "12" : (CurFCR >= 68) ? "13" : (CurFCR >= 48) ? "14" : (CurFCR >= 32) ? "15" : (CurFCR >= 22) ? "16" : (CurFCR >= 14) ? "17" : (CurFCR >= 7) ? "18" : "19";
			FHRFrm = (CurFHR >= 600) ? "3" : (CurFHR >= 174) ? "4" : (CurFHR >= 86) ? "5" : (CurFHR >= 52) ? "6" : (CurFHR >= 32) ? "7" : (CurFHR >= 20) ? "8" : (CurFHR >= 13) ? "9" : (CurFHR >= 6) ? "10" : "11";
			break;
		case 1:
			FCRFrm = (CurFCR >= 200) ? "7" : (CurFCR >= 105) ? "8" : (CurFCR >= 63) ? "9" : (CurFCR >= 37) ? "10" : (CurFCR >= 20) ? "11" : (CurFCR >= 9) ? "12" : "13";
			FHRFrm = (CurFHR >= 280) ? "5" : (CurFHR >= 142) ? "6" : (CurFHR >= 86) ? "7" : (CurFHR >= 60) ? "8" : (CurFHR >= 42) ? "9" : (CurFHR >= 30) ? "10" : (CurFHR >= 20) ? "11" : (CurFHR >= 14) ? "12" : (CurFHR >= 9) ? "13" : (CurFHR >= 5) ? "14" : "15";
			FCRFrmSorc = (CurFCR >= 194) ? "11" : (CurFCR >= 117) ? "12" : (CurFCR >= 78) ? "13" : (CurFCR >= 52) ? "14" : (CurFCR >= 35) ? "15" : (CurFCR >= 23) ? "16" : (CurFCR >= 15) ? "17" : (CurFCR >= 7) ? "18" : "19";
			break;
		case 2:
			FCRFrm = (CurFCR >= 125) ? "9" : (CurFCR >= 75) ? "10" : (CurFCR >= 48) ? "11" : (CurFCR >= 30) ? "12" : (CurFCR >= 18) ? "13" : (CurFCR >= 9) ? "14" : "15";
			FHRFrm = (CurFHR >= 377) ? "4" : (CurFHR >= 152) ? "5" : (CurFHR >= 86) ? "6" : (CurFHR >= 56) ? "7" : (CurFHR >= 39) ? "8" : (CurFHR >= 26) ? "9" : (CurFHR >= 16) ? "10" : (CurFHR >= 10) ? "11" : (CurFHR >= 5) ? "12" : "13";
			break;
		case 3:
			FCRFrm = (CurFCR >= 125) ? "9" : (CurFCR >= 75) ? "10" : (CurFCR >= 48) ? "11" : (CurFCR >= 30) ? "12" : (CurFCR >= 18) ? "13" : (CurFCR >= 9) ? "14" : "15";
			FHRFrm = (CurFHR >= 200) ? "3" : (CurFHR >= 86) ? "4" : (CurFHR >= 48) ? "5" : (CurFHR >= 27) ? "6" : (CurFHR >= 15) ? "7" : (CurFHR >= 7) ? "8" : "9";
			break;
		case 4:
			FCRFrm = (CurFCR >= 200) ? "7" : (CurFCR >= 105) ? "8" : (CurFCR >= 63) ? "9" : (CurFCR >= 37) ? "10" : (CurFCR >= 20) ? "11" : (CurFCR >= 9) ? "12" : "13";
			FHRFrm = (CurFHR >= 200) ? "3" : (CurFHR >= 86) ? "4" : (CurFHR >= 48) ? "5" : (CurFHR >= 27) ? "6" : (CurFHR >= 15) ? "7" : (CurFHR >= 7) ? "8" : "9";
			break;
		case 5:
			if(me.GetState(139) == 2048) {
				FCRFrm = (CurFCR >= 157) ? "9" : (CurFCR >= 95) ? "10" : (CurFCR >= 60) ? "11" : (CurFCR >= 40) ? "12" : (CurFCR >= 26) ? "13" : (CurFCR >= 14) ? "14" : (CurFCR >= 6) ? "15" : "16";
				FHRFrm = (CurFHR >= 280) ? "2" : (CurFHR >= 86) ? "3" : (CurFHR >= 42) ? "4" : (CurFHR >= 20) ? "5" : (CurFHR >= 9) ? "6" : "7";
			}
			else if(me.GetState(140) == 4096) {
				FCRFrm = (CurFCR >= 163) ? "9" : (CurFCR >= 99) ? "10" : (CurFCR >= 63) ? "11" : (CurFCR >= 40) ? "12" : (CurFCR >= 26) ? "13" : (CurFCR >= 15) ? "14" : (CurFCR >= 7) ? "15" : "16";
				FHRFrm = (CurFHR >= 360) ? "4" : (CurFHR >= 152) ? "5" : (CurFHR >= 86) ? "6" : (CurFHR >= 54) ? "7" : (CurFHR >= 37) ? "8" : (CurFHR >= 24) ? "9" : (CurFHR >= 16) ? "10" : (CurFHR >= 10) ? "11" : (CurFHR >= 5) ? "12" : "13";
			}
			else {
				FCRFrm = (CurFCR >= 163) ? "10" : (CurFCR >= 99) ? "11" : (CurFCR >= 68) ? "12" : (CurFCR >= 46) ? "13" : (CurFCR >= 30) ? "14" : (CurFCR >= 19) ? "15" : (CurFCR >= 10) ? "16" : (CurFCR >= 4) ? "17" : "18";
				FHRFrm = (CurFHR >= 456) ? "4" : (CurFHR >= 175) ? "5" : (CurFHR >= 99) ? "6" : (CurFHR >= 63) ? "7" : (CurFHR >= 42) ? "8" : (CurFHR >= 29) ? "9" : (CurFHR >= 19) ? "10" : (CurFHR >= 13) ? "11" : (CurFHR >= 7) ? "12" : (CurFHR >= 3) ? "13" : "14";
			}
			break;
		case 6:
			FCRFrm = (CurFCR >= 174) ? "9" : (CurFCR >= 102) ? "10" : (CurFCR >= 65) ? "11" : (CurFCR >= 42) ? "12" : (CurFCR >= 27) ? "13" : (CurFCR >= 16) ? "14" : (CurFCR >= 8) ? "15" : "16";
			FHRFrm = (CurFHR >= 200) ? "3" : (CurFHR >= 86) ? "4" : (CurFHR >= 48) ? "5" : (CurFHR >= 27) ? "6" : (CurFHR >= 15) ? "7" : (CurFHR >= 7) ? "8" : "9";
			break;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// nip checker by frickaline based on gumshield aka toothless NIP Checker////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var _TLAliases = new Array();
var NTConfig_CheckCodes = true;

function NTU_TLNipCheck()
{
	Print(COLOR_3 + "[\u6210\u529F\u8F09\u5165NIP \u6A94\u6848\u6AA2\u67E5 1.0.0]");
	if (NTConfig_NIPFilePath && NTConfig_NIPFilePath.length > 0)
	{
		var msg;
		msg = "\u627E\u5230 " + NTConfig_NIPFilePath.length + " \u500B nip \u6A94\u6848" ;



		Print(msg);

		var woops;
		var item;
		try { item = me.GetItems()[0]; woops = false;}
		catch (error) { Print("\u904A\u6232\u89D2\u8272\u81F3\u5C11\u8981\u6709\u4E00\u6A23\u7269\u54C1"); woops = true;}
		if (!woops) TLNC_DoIt(item);
	}
	else
		Print("\u6C92\u767C\u73FE\u4EFB\u4F55 NIP \u6A94\u6848 - \u8ACB\u6AA2\u67E5\u4F60\u7684\u89D2\u8272\u53C3\u6578\u8A2D\u5B9A\u6A94.");
}

function TLNC_DoIt(item)
{
	var passRT = 0;
	var failRT = 0;
	var nipsRT = 0;

	var pass = 0;
	var fail = 0;
	var nips = 0;

	var input;
	var line;
	var nip;
	var evals;
	var output;
	var fileNameNip;
	var fileNameOutput;
	var woops;
	var msg;
	var parseResult = 0;

	for (var nipfile = 0 ; nipfile < NTConfig_NIPFilePath.length ; nipfile++)
	{
		fileNameNip = "NTBot/item_configs/" + NTConfig_NIPFilePath[nipfile];
		nip = FileOpen(fileNameNip, 0);
		if (nip)
		{
			TLNC_LoadItemAliases();

			pass = 0;
			fail = 0;
			nips = 0;

			var fso = "NTBot/item_configs/TLNipCheck_snags.txt";
			var snags = FileOpen(fso, 1);
			for (var i = 0; i < _NTIP_CheckList.length; i++) {
				snags.WriteLine(i+": "+_NTIP_CheckList[i]);
			}
			snags.Close();

			fileNameOutput = "NTBot/item_configs/TLNipCheck_" + NTConfig_NIPFilePath[nipfile].replace("/", "_") + ".txt";
			output = FileOpen(fileNameOutput, 1);
			if (output)
			{
				while (!nip.eof)
				{
					input = nip.ReadLine();
					input = input.replace(/^\s+/, '');

					var i = input.indexOf("//");
					line = i >= 0 ? input.slice(0, i) : input;
					line = line.replace(/ |;|\t|\v|\f|\r|\n/g, '').toLowerCase();

					if (line.length == 0)
						continue;

					nips++;
					woops = false;

					parseResult = NTIPCheckNipSyntax(line,output)
					if (!parseResult)
					{
						fail++;
						continue;
					} else
					{
						pass++;
					}
				}
				msg = "\u53D6\u5F97\u6A94\u6848 (" + eval(nipfile + 1) + "/" + NTConfig_NIPFilePath.length + ") " + NTConfig_NIPFilePath[nipfile];
				msg += fail > 0 ? COLOR_1 + " \u5931\u6557" : COLOR_2 + " \u6210\u529F";
				msg += fail > 0 ? COLOR_0 : COLOR_2;
				msg += " (" + pass + "/" + nips + ")";
				msg += fail > 0 ? COLOR_1 : COLOR_0;
				msg += " (" + fail + "/" + nips + ")";
				Print(msg);

				TLNC_WriteIt(output, " \u6210\u529F : " + pass, " \u5931\u6557 : " + fail);
				output.Close();
			}
			else
				Print(COLOR_1 + "\u5EFA\u7ACB\u6A94\u6848\u5931\u6557 : " + fileNameOutput);

			nip.Close();
			passRT += pass;
			failRT += fail;
			nipsRT += nips;
		}
		else
			Print(COLOR_1 + "\u958B\u555F nip \u6A94\u6848\u5931\u6557 : " + fileNameNip);
	}
	Print(" \u7D71\u8A08 : " + nipsRT + " \u4EF6, " + COLOR_2 + passRT + " \u6210\u529F , " + COLOR_1 + failRT + " \u5931\u6557 ");
	if ((failRT > 0)) // || (parseResult != 0))
		Print(COLOR_1 + "\u8ACB\u6AA2\u67E5\u76EE\u9304\u4F4D\u7F6E /NTBot/item_configs/ directory \u6240\u5EFA\u7ACB\u7684\u6A94\u6848");
}

function TLNC_WriteIt(f, l1, l2)
{
	f.WriteLine(l1);
	f.WriteLine(l2);
	f.WriteLine(" ");
}

function TLNC_LoadItemAliases()
{
	var arr, arr1;

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasType)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasType[k]] = k;
	}
	_TLAliases["t"] = arr;
	_TLAliases["t1"] = arr1;

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasClassID)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasClassID[k]] = k;
	}
	_TLAliases["n"] = arr;
	_TLAliases["n1"] = arr1;

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasClass)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasClass[k]] = k;
	}
	_TLAliases["c"] = arr;
	_TLAliases["c1"] = arr1;

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasQuality)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasQuality[k]] = k;
	}
	_TLAliases["q"] = arr;
	_TLAliases["q1"] = arr1;

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasFlag)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasFlag[k]] = k;
	}
	_TLAliases["f"] = arr;
	_TLAliases["f1"] = arr1;

	// #

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasStat)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasStat[k]] = k;
	}
	_TLAliases["s"] = arr;
	_TLAliases["s1"] = arr1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////// NIP CHECK END ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function NTU_TLInventory() {
	NTConfig_TLInventory_SkipEquipped   = false;         // true = just log stash and inventory
	NTConfig_TLInventory_Delimeter      = "-";            // output file delimiter - see function TTL_WriteIt()
	NTConfig_TLInventory_SortOrder      = "QUALITY|TYPE|CLASS|NAME";
	Print(COLOR_3 + "[\u6210\u529F\u8F09\u5165\u5EAB\u5B58\u67E5\u8A62\u8A18\u9304\u7A0B\u5E8F]");
	TLI_DoIt();
	Print ("\u5B8C\u6210");
}

function TLI_DoIt(verbose) {
	Print ("\u5EAB\u5B58\u8A18\u9304\u4E2D ...");
   	if(arguments.length < 1)
		var verbose = false;

	var items = me.GetItems();
	items.sort(function(a, b){
		var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
		if (nameA < nameB) //sort string ascending
			return -1
		if (nameA > nameB)
			return 1
		return 0 //default return value (no sorting)
	});
	var logged = new Array();
	if (items) {
		for(var i = 0 ; i < items.length ; i++) {
			item = items[i];
			ignore = _NTT_IgnoredItems.join("-");
			ignore += "-box";

			if(ignore.indexOf(item.code) == -1) {
				if(!NTConfig_TLInventory_SkipEquipped)
					logged.push(item);
				else if (item.mode == 0)
					logged.push(item);
			}
		}
		if (logged.length) {
			var fileName = "logs/" + me.account + "." + me.name + ".txt";
			_file = FileOpen(fileName, 1);
			if (_file) {
				for (var i = 0; i < logged.length; i++)
					TLI_LogItem(_file, logged[i], verbose);
				_file.Close();
				Print (COLOR_2 + logged.length + " \u7269\u54C1\u6E05\u55AE\u5B58\u653E\u65BC - " + fileName + " -");
			}
			else
				Print(COLOR_1 + "\u7121\u6CD5\u5BEB\u5165\u6A94\u6848 - " + fileName);
		}
		else
			Print(COLOR_1 + " \u904A\u6232\u89D2\u8272\u6C92\u6709\u7269\u54C1\u53EF\u4F9B\u7D00\u9304 ");
	}
	else
		Print(COLOR_1 + " \u904A\u6232\u89D2\u8272\u6C92\u6709\u7269\u54C1\u53EF\u4F9B\u7D00\u9304 ");
}

function TLI_LogItem(file, item, verbose) {
	var name = item.name;
	var UNIDtext = "";

	name = name.replace(/\n/g, " ");
	file.WriteLine("\t"+name);
	if (!(item.itemflag & 0x10)) {
		for (var qual in _NTIPAliasQuality) {
			if (_NTIPAliasQuality[qual]==item.quality) UNIDtext+=qual.charAt(0).toUpperCase() + qual.substr(1) + "/";
		}
		var s = item.itemdesc;
		s = s.replace(REGEX6, REPLACE6);
		var def = s.match(/.*(Defense: \d+).*/);
		if (def!=null) {
			def[0] = def[0].replace(/Defense:/,"Def");
			UNIDtext += def[0]+"/";
		}
		UNIDtext += "Unidentified";
		if (item.itemflag & 0x400000) UNIDtext+="/Ethereal";
		 file.WriteLine(UNIDtext);
	// 74 is rune, 91 - 102 is gem
	} else if (item.itemtype!=74 && !(item.itemtype >= 91 && item.itemtype <= 102)) {
		file.WriteLine(TLI_ItemDesc(item.itemdesc, item.name, verbose));
	}
	file.WriteLine("");
}

function TLI_ItemDesc(s, name, verbose) {
	s = s.replace(REGEX6, REPLACE6);
	re = new RegExp(name, "gi");
	s = s.replace(re, "");
	s = s.replace("Keep in Inventory to Gain Bonus\n", "");
	s = s.replace("Can be Inserted into Socketed Items\n", "");

	s = s.replace(/Angelic \w+\s*/gi, "");
	s = s.replace(/Arcanna's \w+\s*/gi, "");
	s = s.replace(/Arctic \w+\s*/gi, "");
	s = s.replace(/Berserker's \w+\s*/gi, "");
	s = s.replace(/Cathan's \w+\s*/gi, "");
	s = s.replace(/Civerb's \w+\s*/gi, "");
	s = s.replace(/Cleglaw's \w+\s*/gi, "");
	s = s.replace(/Death's \w+\s*/gi, "");
	s = s.replace(/Hsarus' Defense\s*/gi, "");
	s = s.replace(/Hsarus' Iron \w+\s*/gi, "");
	s = s.replace(/Infernal \w+\s*/gi, "");
	s = s.replace(/Iratha's \w+\s*/gi, "");
	s = s.replace(/Isenhart's \w+\s*/gi, "");
	s = s.replace(/Milabrega's \w+\s*/gi, "");
	s = s.replace(/Sigon's Complete \w+\s*/gi, "");
	s = s.replace(/Sigon's \w+\s*/gi, "");
	s = s.replace(/Tancred's \w+\s*/gi, "");
	s = s.replace(/Vidala's \w+\s*/gi, "");
	s = s.replace(/Aldur's Stony Gaze\s*/i, "");
	s = s.replace(/Aldur's \w+\s*/gi, "");
	s = s.replace(/Bul-Kathos' Sacred \w+\s*/i, "");
	s = s.replace(/Bul-Kathos' Tribal \w+\s*/i, "");
	s = s.replace(/Bul-Kathos' Children\s*/i, "");
	s = s.replace(/Cow King's \w+\s*/gi, "");
	s = s.replace(/Telling of Beads\s*/i, "");
	s = s.replace(/Laying of Hands\s*/i, "");
	s = s.replace(/Dark Adherent\s*/gi, "");
	s = s.replace(/Rite of Passage\s*/gi, "");
	s = s.replace(/Credendum\s*/gi, "");
	s = s.replace(/The Disciple\s*/gi, "");
	s = s.replace(/Griswold's \w+\s*/gi, "");
	s = s.replace(/Haemosu's \w+\s*/gi, "");
	s = s.replace(/Dangoon's \w+\s*/gi, "");
	s = s.replace(/Taebaek's \w+\s*/gi, "");
	s = s.replace(/Ondal's \w+\s*/gi, "");
	s = s.replace(/Heaven's Brethren\s*/gi, "");
	s = s.replace(/Hwanin's \w+\s*/gi, "");
	s = s.replace(/Immortal King's Soul \w+\s*/gi, "");
	s = s.replace(/Immortal King's Stone \w+\s*/gi, "");
	s = s.replace(/Immortal King's \w+\s*/gi, "");
	s = s.replace(/Immortal King\s*/gi, "");
	s = s.replace(/M'avina's True \w+\s*/gi, "");
	s = s.replace(/M'avina's Icy \w+\s*/gi, "");
	s = s.replace(/M'avina's Battle \w+\s*/gi, "");
	s = s.replace(/M'avina's \w+\s*/gi, "");
	s = s.replace(/Natalya's \w+\s*/gi, "");
	s = s.replace(/Naj's Light \w+\s*/gi, "");
	s = s.replace(/Naj's Ancient \w+\s*/gi, "");
	s = s.replace(/Naj's \w+\s*/gi, "");
	s = s.replace(/Guillaume's \w+\s*/gi, "");
	s = s.replace(/Whitstan's \w+\s*/gi, "");
	s = s.replace(/Magnus' \w+\s*/gi, "");
	s = s.replace(/Wilhelm's \w+\s*/gi, "");
	s = s.replace(/Orphan's \w+\s*/gi, "");
	s = s.replace(/Sander's \w+\s*/gi, "");
	s = s.replace(/Sazabi's \w+\s+\w+\s*/gi, "");
	s = s.replace(/Tal Rasha's Fine-Spun \w+\s*/gi, "");
	s = s.replace(/Tal Rasha's Lidless \w+\s*/gi, "");
	s = s.replace(/Tal Rasha's Horadric \w+\s*/gi, "");
	s = s.replace(/Tal Rasha's \w+\s*/gi, "");
	s = s.replace(/Trang-Oul's \w+\s*/gi, "");

	s = s.replace(/\n\n/g, "\n");
	s = s.replace(/^\s*/, "");
	s = s.replace(/\s*$/, "");

	if (!verbose) {
	s = s.replace(/Throw Damage: \d+ to \d+/, "");
	s = s.replace(/Quantity:\s+\d+/, "");
	s = s.replace(/\(\d+% Bonus to Attack Rating\)/g, "Visionary");
	s = s.replace(/\d+% Bonus to Attack Rating/g, "Visionary");
	s = s.replace(/Visionary (Based on Character Level)/g, "Visionary per cLvl");
	s = s.replace(/Keep in Inventory to Gain Bonus/g, "");
	s = s.replace(/Better Chance of Getting Magic Items/g, "MF");
	s = s.replace(/Extra Gold from Monsters/g, "GF");
	s = s.replace(/Hit Causes Monster to Flee \d+%/, "");
	s = s.replace(/Faster Run\/Walk/g, "FRW");
	s = s.replace(/Replenish Life/g, "Rep Life");
	s = s.replace(/Regenerate Mana/g, "Regen Mana");
	s = s.replace(/Damage Taken Goes To Mana/g, "Dmg To Mana");
	s = s.replace(/\+\d+ to Light Radius/g, "");
	s = s.replace(/\+\d+ Maximum Stamina/g, "");
	s = s.replace(/Heal Stamina Plus \d+\%/g, "");
	s = s.replace(/Indestructible/g, "Indestr");
	s = s.replace(/All Resistances/g, "All Res");
	s = s.replace(/to all Attributes/g, "All Attribs");
	s = s.replace(/\d+ Absorbs Cold Damage \(Based on Character Level\)/g, "Cold Absorb");
	s = s.replace(/\d+ Absorbs Fire Damage \(Based on Character Level\)/g, "Fire Absorb");
	s = s.replace(/\d+ Absorbs Lightning Damage \(Based on Character Level\)/g, "Lite Absorb");
	s = s.replace(/\d+ Absorbs Magic Damage \(Based on Character Level\)/g, "Magic Absorb");
	s = s.replace(/Requirements/g, "Req");
	s = s.replace(/Increased Attack Speed/g, "IAS");
	s = s.replace(/Poison Length Reduced by/g, "Psn LRB");
	s = s.replace(/\d+\% Chance to cast level \d+ /g, "");
	s = s.replace(/Aura When Equipped/g, "Aura");
	s = s.replace(/Level \d+ /g, "");
	s = s.replace(/\(\d+\/\d+ Charges\)/g, "Charges");
	s = s.replace(/to Maximum Damage/g, "Max Dmg");
	s = s.replace(/to Minimum Damage/g, "Min Dmg");
	s = s.replace(/\(\w+ Only\)/g, "");
	s = s.replace(/to Experience Gained/g, "XP");
	s = s.replace(/Cannot Be Frozen/g, "CBF");
	s = s.replace(/Freezes target \+\d+/g, "Freezes target");
	s = s.replace(/Chance of Open Wounds/g, "Open Wounds");
	s = s.replace(/Prevent Monster Heal/g, "PMH");
	s = s.replace(/Slows Target by \d+%/g, "Slows");
	s = s.replace(/ Skill Levels/g, "");
	s = s.replace(/to All Skills/g, "Skills");
	s = s.replace(/ Socketed \(/g, "Sockets(");
	s = s.replace(/Socketed \(/g, "Sockets(");
	s = s.replace(/Knockback/g, "KB");
	s = s.replace(/Ignore Target's Defense/g, "ITD");
	s = s.replace(/\w+-Hand Damage: \d+ to \d+/g, "");
	s = s.replace(/\w+ Class - \w+ Attack Speed/g, "");
	s = s.replace(/\w+ Class - \w+ \w+ Attack Speed/g, "");
	s = s.replace(/Enhanced Defense/g, "ED");
	s = s.replace(/Enhanced Damage/g, "EDam");
	s = s.replace(/Reduces all Vendor Prices/g, "VP");
	s = s.replace(/Mana stolen per hit/g, "ML");
	s = s.replace(/Life stolen per hit/g, "LL");
	s = s.replace(/('\w+')/, "");
	s = s.replace(/(Durability:\s+\d+\s+\w{2}\s+\d+)/, "")
	s = s.replace(/(Durability:\s+\d{2}\s+\w{2}\s+\d{2})/, "");
	s = s.replace(/(Durability:\s+\d\s+\w{2}\s+\d{2})/, "");
	s = s.replace(/to Mana/g, "Mana");
	s = s.replace(/to Strength/g, "STR");
	s = s.replace(/to Dexterity/g, "DEX");
	s = s.replace(/to Life/g, "Life");
	s = s.replace(/to Vitality/g, "Vita");
	s = s.replace(/to Energy/g, "Energy");
	s = s.replace(/Faster Hit Recovery/g, "FHR");
	s = s.replace(/Damage Reduced by/g, "DR");
	s = s.replace(/Faster Cast Rate/g, "FCR");
	s = s.replace(/Faster Block Rate/g, "FBR");
	s = s.replace(/\(Based on Character Level\)/g, "per cLvl");
	s = s.replace(/Damage of \d+/g, "Damage");
	s = s.replace(/against/g, "vs.");
	s = s.replace(/Damage to Demons/g, "vs. Demons");
	s = s.replace(/to Maximum/g, "Max");
	s = s.replace(/to Cold Skill Damage/g, "Cold Damage");
	s = s.replace(/to Fire Skill Damage/g, "Fire Damage");
	s = s.replace(/to Lightning Skill Damage/g, "Lightning Damage");
	s = s.replace(/Increase Maximum Mana/g, "Max Mana +");
	s = s.replace(/Increase Maximum Mana/g, "Max Life +");
	s = s.replace(/Half Freeze Duration/g, "");
	s = s.replace(/Slower Stamina Drain/g, "");
	s = s.replace(/Mana after each Kill/g, "MPK");
	s = s.replace(/Life after each Kill/g, "LPK");
	s = s.replace(/Replenishes quantity/g, "Rep Quantity");
	s = s.replace(/Increased Stack Size/g, "");
	s = s.replace(/\d+% Reanimate as: Returned/g, "Reanimate");
	s = s.replace(/Chance of Crushing Blow/g, "CB");
	s = s.replace(/after each Demon Kill/g, "per Demon Kill");
	s = s.replace(/\+\d+% Damage to Undead/g, "");
	s = s.replace(/Increased Chance of Blocking/g, "ICB");
	s = s.replace(/Slain Monsters Rest in Peace/g, "Monsters RIP");
	s = s.replace(/Chance to Block: \d+%/g, "");
	s = s.replace(/Increase Maximum Durability/g, "Dura +");
	s = s.replace(/\(poison damage over \d seconds\)/, "pdsc");
	s = s.replace(/\(poison damage over \d+ seconds\)/, "pdsc");
	s = s.replace(/poison damage over /g, "poison/");
	s = s.replace(/Required Level:/, "Lvl Req");
	s = s.replace(/Required Strength: \d+/, "");
	s = s.replace(/Required Dexterity: \d+/, "");
	s = s.replace(/to Enemy Fire Resistance/g, "Enemy FRes");
	s = s.replace(/to Enemy Lightning Resistance/g, "Enemy LRes");
	s = s.replace(/to Enemy Cold Resistance/g, "Enemy CRes");
	s = s.replace(/to Enemy Poison Resistance/g, "Enemy PRes");
	s = s.replace(/Fire Resist/g, "FRes");
	s = s.replace(/Lightning Resist/g, "LRes");
	s = s.replace(/Cold Resist/g, "CRes");
	s = s.replace(/Poison Resist/g, "PRes");
	s = s.replace(/to Attack Rating/g, "AR");
	s = s.replace(/Repairs \d+ durability in \d+ secs/g, "Self-Repair");
	s = s.replace(/Ethereal \(Cannot be Repaired\)/g, "Ethereal");
	s = s.replace(/Can be Inserted into Socketed Items\/Weapons:/g, "");
	s = s.replace(/Adds /g, "+");
	s = s.replace(/to Sorceress/g, "Sorceress");
	s = s.replace(/to Paladin/g, "Paladin");
	s = s.replace(/to Druid/g, "Druid");
	s = s.replace(/to Barbarian/g, "Barbarian");
	s = s.replace(/to Assassin/g, "Assassin");
	s = s.replace(/to Amazon/g, "Amazon");
	s = s.replace(/to Necromancer/g, "Necromancer");
	s = s.replace(/ to /g, " ");
	s = s.replace(/seconds/gi, "secs");
	s = s.replace(/Defense/gi, "Def");
	s = s.replace(/^Def:/i, "Def");

	re = new RegExp("\\n", "gi");
	s = s.replace(re, ",");
	s = s.replace(/,,/g, ",");
	s = s.replace(/,,/g, ",");
	s = s.replace(/,,/g, ",");
	s = s.replace(/,/g, ", ");
	s = s.replace(/^,/, "");
	s = s.replace(/,$/, "");
	} return s;
}

function NTU_DropItems() {
	var _script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);
	if (_script.running && NTC_InTown())
		return;
	Print("\u958B\u59CB\u4E1F\u51FA\u8EAB\u4E0A\u80CC\u5305\u53CA\u79C1\u4EBA\u5132\u5B58\u7BB1\u6240\u6709\u7269\u54C1");
	NTU_MoveToStash();
	NTU_ClearInventory();
	NTU_DropStash();
	Print("\u8EAB\u4E0A\u80CC\u5305\u53CA\u79C1\u4EBA\u5132\u5B58\u7BB1\u6240\u6709\u7269\u54C1\u5DF2\u5168\u90E8\u4E1F\u51FA");
}

function NTU_ClearInventory() {
	var _items = me.GetItems();

	if(!_items)
		return false;

	for(var i = 0 ; i < _items.length ; i++) {
		if(_items[i].itemloc == 0  && !NTSI_IsIgnoredItemInt(_items[i].classid) && NTConfig_Columns[_items[i].y][_items[i].x] > 0) {
			NTT_DropItem(_items[i]);
		}
	}
}

function NTU_MoveToStash() {
	var _stash;

	NTTM_TownMove("stash");

	_stash = NTC_FindUnit(NTC_UNIT_OBJECT, NTC_UNIT_STASH, 5);

	if(_stash) {
		NTT_DoInteract(_stash);
	}
}

function NTU_DropStash() {
	var _items = me.GetItems();

	if(!_items)
		return false;

	for(var i = 0 ; i < _items.length ; i++) {
		if(_items[i].mode == 0 && _items[i].itemloc == 4 && _items[i].classid != 549) {
			NTT_DropItem(_items[i]);
         	}
	}
	me.Cancel(1);
}

function NTU_CursorILvl() {
	if(me.itemoncursor) {
		Print(COLOR_4 + me.GetCursorItem().name.split(" \n ")[0] + COLOR_8 + " - " + COLOR_4 + " \u7269\u54C1\u7B49\u7D1A " + COLOR_8 + me.GetCursorItem().itemlevel);
	}
	else
		Print(COLOR_8 + " \u6C92\u6709\u7269\u54C1\u53EF\u4F9B\u6AA2\u67E5.");
}
// ubi21 Enigma reset start
////////////////////////////

// Need a msging system to prevent certain code from executing when another is running.
function NTU_LogExitStatus(value)
{
   var _hfile = FileOpen(me.account + "_exitValue.txt", 1);
   if(!_hfile)
      return false;

   _hfile.WriteLine(value);
   _hfile.Close();
}

function NTU_GetExitStatus()
{
   var _script;

   var _hfile = FileOpen(me.account + "_exitValue.txt", 2);
   if(!_hfile)
      return "E";

   _script = _hfile.ReadLine();

   _hfile.Close();

   return _script;
}
// ubi21 Enigma reset end
////////////////////////////

function NTU_DontOpenAreas() {

	var _presentarea = me.areaid

	for (var i = 0; i < NTConfig_DontOpenChestAreas.length; i++) {
		if (_presentarea == NTConfig_DontOpenChestAreas[i]){
			return false;
		}
	}
	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																													                      //
// NT_Developement tools started by stairbuilder on 11-26-10                                                                              //
// My hope is that others will contribute to this script so we can have a nice little development file to work from                       //
// Feel free to add to this file or to change anything to make it more useful                                                             //
// also as we all know some of the id names are wrong/different so if you find something that is wrong or different feel free to chang it //										 //
//																													                      //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function NTU_DevelopementTools()
{
	NTU_getlocalstringids = true;			// pretty much same as objects
	NTU_objectids = true;
	NTU_monsterids = true;					// prints the name and id number of monsters.  Probably should set a range for it but been using it for summons
	getstate = true;					// prints id # of state and "active" if the state is active
	var MonsterIdRange = 	[0, 575];	// set the range of id's you want to look for ie [420, 432] looks for druid summons
										// you can set the MonsterRange = [0, 575] and it will give all monsters near you, but to be effective need to add a range to it
	var StateIdRange = 	[0, 159];		// set the range of me.states you want to check if active ie [141, 154] looks for druid states
	var _mestate;
	var ObjectIdRange = [0, 600];		// this is range of object id's similar to above ranges
	var _objectlookrange = 5;			// this is the distance that you wish to look for objects from your toon
	var StringIdRange = [2500, 4000];	// this is range getlocalstrings  id's similar to above ranges
	var _stringlookrange = 5;			// this is the distance that you wish to look for getlocalstrings from your toon
	Print(COLOR_2 + IdToName() + " - \u89D2\u8272\u985E\u5225(" +me.classid+ ")");
	Print("   ");

	if(NTU_monsterids){
		for(var i = MonsterIdRange[0]; i < MonsterIdRange[1] ; i++){
			var _monster = NTC_FindUnit(NTC_UNIT_MONSTER, i);
			if(NTC_FindUnit(NTC_UNIT_MONSTER, i)){
				if(_monster.GetParent() != null)
					Print(COLOR_8 + _monster.name + " - monsterid(" + i + ") - parent is(" + _monster.GetParent().name + ")" + " - \u6A21\u5F0F " + "[" + _monster.mode + "]");
				else
					Print(COLOR_8 + _monster.name + " - monsterid(" + i + ")" + " - \u6A21\u5F0F " + "[" + _monster.mode + "]");
				Delay(500);
			}
		}
	}
	Print("   ");

	if(NTU_getstate){
		for(var i = StateIdRange[0]; i < StateIdRange[1]; i++){
			if(me.GetState(i)){
				Print(COLOR_9 + StateToName(i).toLowerCase() + " - me.GetState(" + i  +") is active ");
				Delay(500);
			}
		}
	}
	Print("   ");

	if(NTU_objectids){
		for(var i = ObjectIdRange[0]; i < ObjectIdRange[1] ; i++){
			var _object = NTC_FindUnit(NTC_UNIT_OBJECT, i);
			if(NTC_FindUnit(NTC_UNIT_OBJECT, i) && (GetDistance(me.x,me.y,_object.x,_object.y)<_objectlookrange))
				Print(COLOR_14 + " \u76EE\u6A19\u540D\u7A31 - " + _object.name + " - \u76EE\u6A19ID - (" + i + ")" + " - \u76EE\u6A19\u6A21\u5F0F " + "[" + _object.mode + "]");
			//Delay(500);
		}
	}
	Print("   ");
	if(NTU_getlocalstringids){
		for(var i = StringIdRange[0]; i < StringIdRange[1]; i++){
			var _stringobject = NTC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(i));
			if(NTC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(i)) && (GetDistance(me.x,me.y,_stringobject.x,_stringobject.y)<_stringlookrange))
				Print(COLOR_14 + "String name is - " + _stringobject.name + " - stringid - (" + i + ")" + " - objects mode is " + "[" + _stringobject.mode + "]");
			//Delay(30);
		}
	}
	Print("   ");

}

function IdToName(){

	switch(me.classid)
	{
		case 0:
			return "\u4E9E\u99AC\u905C";
		case 1:
			return "\u6CD5\u5E2B";
		case 2:
			return "\u6B7B\u9748";
		case 3:
			return "\u8056\u9A0E";
		case 4:
			return "\u91CE\u883B\u4EBA";
		case 5:
			return "\u5FB7\u9B6F\u4F0A";
		case 6:
			return "\u523A\u5BA2";
	}
}

function StateToName(_mestate){

	var _state;

	switch(_mestate)
	{
		case 0:
			return "NONE";
				break;
		case 1:
			return "FREEZE";
				break;
		case 2:
			return "POISON";
				break;
		case 3:
			return "RESISTFIRE";
				break;
		case 4:
			return "RESISTCOLD";
				break;
		case 5:
			return "RESISTLIGHT";
				break;
		case 6:
			return "RESISTMAGIC ";

		case 7:
			return "PLAYERBODY";
				break;
		case 8:
			return "RESISTALL";
				break;
		case 9:
			return "AMPLIFYDAMAGE ";
				break;
		case 10:
			return "FROZENARMOR";
				break;
		case 11:
			return "COLD";
				break;
		case 12:
			return "INFERNO";
				break;
		case 13:
			return "BLAZE";
				break;
		case 14:
			return "BONEARMOR";
				break;
		case 15:
			return "CONCENTRATE";
				break;
		case 16:
			return "ENCHANT";
				break;
		case 17:
			return "INNERSIGHT";
				break;
		case 18:
			return "SKILL_MOVE";
				break;
		case 19:
			return "WEAKEN";
				break;
		case 20:
			return "CHILLINGARMOR";
				break;
		case 21:
			return "STUNNED";
				break;
		case 22:
			return "SPIDERLAY";
				break;
		case 23:
			return "DIMVISION";
				break;
		case 24:
			return "SLOWED";
				break;
		case 25:
			return "FETISHAURA";
				break;
		case 26:
			return "SHOUT";
				break;
		case 27:
			return "TAUNT";
				break;
		case 28:
			return "CONVICTION";
				break;
		case 29:
			return "CONVICTED";
				break;
		case 30:
			return "ENERGYSHIELD";
				break;
		case 31:
			return "VENOMCLAWS";
				break;
		case 32:
			return "BATTLEORDERS";
				break;
		case 33:
			return "MIGHT";
				break;
		case 34:
			return "PRAYER";
				break;
		case 35:
			return "HOLYFIRE";
				break;
		case 36:
			return "THORNS";
				break;
		case 37:
			return "DEFIANCE";
				break;
		case 38:
			return "THUNDERSTORM";
				break;
		case 39:
			return "LIGHTNINGBOLT";
				break;
		case 40:
			return "BLESSEDAIM";
				break;
		case 41:
			return "STAMINA";
				break;
		case 42:
			return "CONCENTRATION";
				break;
		case 43:
			return "HOLYWIND";
				break;
		case 44:
			return "HOLYWINDCOLD";
				break;
		case 45:
			return "CLEANSING";
				break;
		case 46:
			return "HOLYSHOCK";
				break;
		case 47:
			return "SANCTUARY";
				break;
		case 48:
			return "MEDITATION";
				break;
		case 49:
			return "FANATICISM";
				break;
		case 50:
			return "REDEMPTION";
				break;
		case 51:
			return "BATTLECOMMAND";
				break;
		case 52:
			return "PREVENTHEAL";
				break;
		case 53:
			return "CONVERSION";
				break;
		case 54:
			return "UNINTERRUPTABLE";
				break;
		case 55:
			return "IRONMAIDEN";
				break;
		case 56:
			return "TERROR";
				break;
		case 57:
			return "ATTRACT";
				break;
		case 58:
			return "LIFETAP";
				break;
		case 59:
			return "CONFUSE";
				break;
		case 60:
			return "DECREPIFY";
				break;
		case 61:
			return "LOWERRESIST";
				break;
		case 62:
			return "OPENWOUNDS";
				break;
		case 63:
			return "DOPPLEZON";
				break;
		case 64:
			return "CRITICALSTRIKE";
				break;
		case 65:
			return "DODGE";
				break;
		case 66:
			return "AVOID";
				break;
		case 67:
			return "PENETRATE";
				break;
		case 68:
			return "EVADE";
				break;
		case 69:
			return "PIERCE";
				break;
		case 70:
			return "WARMTH";
				break;
		case 71:
			return "FIREMASTERY";
				break;
		case 72:
			return "LIGHTNINGMASTERY";
				break;
		case 73:
			return "COLDMASTERY";
				break;
		case 74:
			return "SWORDMASTERY";
				break;
		case 75:
			return "AXEMASTERY";
				break;
		case 76:
			return "MACEMASTERY";
				break;
		case 77:
			return "POLEARMMASTERY";
				break;
		case 78:
			return "THROWINGMASTERY";
				break;
		case 79:
			return "SPEARMASTERY";
				break;
		case 80:
			return "INCREASEDSTAMINA";
				break;
		case 81:
			return "IRONSKIN";
				break;
		case 82:
			return "INCREASEDSPEED";
				break;
		case 83:
			return "NATURALRESISTANCE";
				break;
		case 84:
			return "FINGERMAGECURSE";
				break;
		case 85:
			return "NOMANAREGEN";
				break;
		case 86:
			return "JUSTHIT";
				break;
		case 87:
			return "SLOWMISSILES";
				break;
		case 88:
			return "SHIVERARMOR";
				break;
		case 89:
			return "BATTLECRY";
				break;
		case 90:
			return "BLUE";
				break;
		case 91:
			return "RED";
				break;
		case 92:
			return "DEATH_DELAY";
				break;
		case 93:
			return "VALKYRIE";
				break;
		case 94:
			return "FRENZY";
				break;
		case 95:
			return "BERSERK";
				break;
		case 96:
			return "REVIVE";
				break;
		case 97:
			return "ITEMFULLSET";
				break;
		case 98:
			return "SOURCEUNIT";
				break;
		case 99:
			return "REDEEMED";
				break;
		case 100:
			return "HEALTHPOT";
				break;
		case 101:
			return "HOLYSHIELD";
				break;
		case 102:
			return "JUST_PORTALED";
				break;
		case 103:
			return "MONFRENZY";
				break;
		case 104:
			return "CORPSE_NODRAW";
				break;
		case 105:
			return "ALIGNMENT";
				break;
		case 106:
			return "MANAPOT";
				break;
		case 107:
			return "SHATTER";
				break;
		case 108:
			return "SYNC_WARPED";
				break;
		case 109:
			return "CONVERSION_SAVE";
				break;
		case 110:
			return "PREGNANT";
				break;
		case 111:
			return "111";
				break;
		case 112:
			return "RABIES";
				break;
		case 113:
			return "DEFENSE_CURSE";
				break;
		case 114:
			return "BLOOD_MANA";
				break;
		case 115:
			return "BURNING";
				break;
		case 116:
			return "DRAGONFLIGHT";
				break;
		case 117:
			return "MAUL";
				break;
		case 118:
			return "CORPSE_NOSELECT";
				break;
		case 119:
			return "SHADOWWARRIOR";
				break;
		case 120:
			return "FERALRAGE";
				break;
		case 121:
			return "SKILLDELAY";
				break;
		case 122:
			return "PROGRESSIVE_DAMAGE";
				break;
		case 123:
			return "PROGRESSIVE_STEAL";
				break;
		case 124:
			return "PROGRESSIVE_OTHER";
				break;
		case 125:
			return "PROGRESSIVE_FIRE";
				break;
		case 126:
			return "PROGRESSIVE_COLD";
				break;
		case 127:
			return "PROGRESSIVE_LIGHTNING";
				break;
		case 128:
			return "SHRINE_ARMOR";
				break;
		case 129:
			return "SHRINE_COMBAT";
				break;
		case 130:
			return "SHRINE_RESIST_LIGHTNING";
				break;
		case 131:
			return "SHRINE_RESIST_FIRE";
				break;
		case 132:
			return "SHRINE_RESIST_COLD";
				break;
		case 133:
			return "SHRINE_RESIST_POISON";
				break;
		case 134:
			return "SHRINE_SKILL";
				break;
		case 135:
			return "SHRINE_MANA_REGEN";
				break;
		case 136:
			return "SHRINE_STAMINA";
				break;
		case 137:
			return "SHRINE_EXPERIENCE";
				break;
		case 138:
			return "FENRIS_RAGE";
				break;
		case 139:
			return "WOLF";
				break;
		case 140:
			return "BEAR";
				break;
		case 141:
			return "BLOODLUST";
				break;
		case 142:
			return "CHANGECLASS";
				break;
		case 143:
			return "ATTACHED";
				break;
		case 144:
			return "HURRICANE";
				break;
		case 145:
			return "ARMAGEDDON";
				break;
		case 146:
			return "INVIS";
				break;
		case 147:
			return "BARBS";
				break;
		case 148:
			return "WOLVERINE";
				break;
		case 149:
			return "OAKSAGE";
				break;
		case 150:
			return "VINE_BEAST";
				break;
		case 151:
			return "CYCLONEARMOR";
				break;
		case 152:
			return "CLAWMASTERY";
				break;
		case 153:
			return "CLOAK_OF_SHADOWS";
				break;
		case 154:
			return "RECYCLED";
				break;
		case 155:
			return "WEAPONBLOCK";
				break;
		case 156:
			return "CLOAKED";
				break;
		case 157:
			return "QUICKNESS";
				break;
		case 158:
			return "BLADESHIELD";
				break;
		case 159:
			return "FADE";
				break;

	}
	return _state;
}

function NTU_LogPrint(filepath, mesg){

	var _Myarea = GetArea();
	var _filepath = filepath;
	var _mesg = mesg;

	var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
	var logfile = FileOpen(_filepath, 2); // opens file
	if(!logfile)
		var logfile = FileOpen(_filepath, 1); // if file not there then creates it
	logfile.WriteLine(date + " " + _mesg + "\u5730\u5340[" + _Myarea.name + "]");
	logfile.Close();
}

function NTU_DeathLog(Corpses, InitLife) {
	var logMessage = "";
	var _time = NTU_timeStamp();
	logMessage += COLOR_1 + "\u6B7B\u4EA1\u8A18\u9304 ;";
	logMessage += COLOR_1 + "--------------------------------------------------";
	logMessage += COLOR_1 + " \n \u5075\u6E2C\u5230\u53EF\u80FD\u6B7B\u4EA1.";
	if (Corpses > 0)
		logMessage += COLOR_8 + " \n \u5C4D\u9AD4\u6062\u5FA9.";
	logMessage += COLOR_8 + " \n \u751F\u547D\u958B\u59CB : " + InitLife;
	logMessage += COLOR_4 + " \n \u6642\u9593 : " + _time;
	logMessage += COLOR_1 + "\n --------------------------------------------------";
	NTC_SendLogToOOG(NTC_LOG_COMMON, logMessage);
}

function NTU_MercReviveLog() {
	var _area = GetArea();
	var areaName = "\u672A\u77E5\u5730\u5340";
	if (_area) areaName = _area.name;
	var _time = NTU_timeStamp();
	NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_8 + "\u50AD\u5175\u6062\u5FA9 " + ";" +
	COLOR_1 + "--------------------------------------------------" +
		COLOR_8 + " \n \u50AD\u5175\u6062\u5FA9\u65BC " + areaName +
		COLOR_4 + " \n \u6642\u9593 : " + _time +
	COLOR_1 + "\n --------------------------------------------------");
}

function NTU_MercDeathLog() {
	var _area = GetArea();
	var areaName = "\u672A\u77E5\u5730\u5340";
	if (_area) areaName = _area.name;
	var _time = NTU_timeStamp();
	NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_8 + " \u50AD\u5175\u6B7B\u4EA1\u8A18\u9304 " + ";" +
		COLOR_1 + "--------------------------------------------------" +
		COLOR_8 + " \n \u50AD\u5175\u6B7B\u5728 " + areaName +
		COLOR_4 + " \n \u6642\u9593 : " + _time +
	COLOR_1 + "\n --------------------------------------------------");
}

function NTU_ChickenLog(_type) {
	var _area = GetArea();
	var _time;
	var logMessage = "";
	var areaName = "\u672A\u77E5\u5730\u5340";
	var exitingGame = false;
	var _monster;
	var _nearbyMonsters = new Array();
	var me_ping = me.ping;
	_nearbyMonsters = NTU_GetNearbyMonsters(50);

	if (_type == " EtalLifeChicken " || _type == " EtalManaChicken ")
		exitingGame = true;
	if (_area)
		areaName = _area.name;
	var _type_C;
	switch (_type) {
	case " EtalLifeChicken ":
		_type_C = " \u751F\u547D\u503C\u904E\u4F4E ";
		break;
	case " EtalManaChicken ":
		_type_C = " \u6CD5\u529B\u503C\u904E\u4F4E ";
		break;
	case " MercChicken ":
		_type_C = " \u50AD\u5175\u751F\u547D\u503C\u904E\u4F4E ";
		break;
	default:
		_type_C = " \u751F\u547D\u503C\u904E\u4F4E ";
		break;
	}
	if (_type == "EtalLifeChicken" || _type == "EtalManaChicken") exitingGame = true;

	if (_area) areaName = _area.name;

	if (exitingGame) {
		logMessage += COLOR_1 + " \u9003\u547D\u89F8\u767C\u767C\u751F\u65BC(" + areaName + ")" + ";";
	} else {
		logMessage += COLOR_9 + " \u904A\u6232\u7D42\u6B62\u65BC " + _type_C + "(" + areaName + ")" + ";";
	}

	logMessage += COLOR_1 + "--------------------------------------------------";

	if (_type == "EtalLifeChicken") {
		var _threshold = parseInt(me.hpmax * NTConfig_EtalLifeChicken,10) / 100;
		logMessage += COLOR_9 + " \n " + " \u751F\u547D\u503C\u904E\u4F4E(" + NTConfig_EtalLifeChicken + " %  / " + _threshold + " hp)\u9003\u547D\u89F8\u767C ";
	}
	if (_type == "EtalManaChicken") {
		var _threshold = parseInt(me.mpmax * NTConfig_EtalManaChicken,10) / 100;
		logMessage += COLOR_9 + " \n " + " \u6CD5\u529B\u503C\u904E\u4F4E(" + NTConfig_EtalManaChicken + " %  / " + _threshold + " mp)\u9003\u547D\u89F8\u767C ";
	}

	logMessage += COLOR_8 + " \n Ping : " + me_ping;
	if (me.hp <= 0)
		logMessage += COLOR_8 + " \n ** \u89D2\u8272\u6B7B\u4EA1  ** ";
	logMessage += COLOR_1 + " \n \u751F\u547D : " + me.hp;
	logMessage += COLOR_3 + " \n \u6CD5\u529B : " + me.mp;
	_time = NTU_timeStamp();
	logMessage += COLOR_4 + " \n \u6642\u9593 : " + _time;
	logMessage += COLOR_2 + " \n \n \u63A5\u8FD1\u602A\u7269 : ";

	if (_nearbyMonsters.length < 20) {
		for (_index in _nearbyMonsters) {
			_monster = _nearbyMonsters[_index];
			logMessage += COLOR_2 + "\n  " + _monster;
		}
	} else {
		logMessage += COLOR_2 + "\n \u6578\u91CF\u7E41\u591A\u7121\u6CD5\u5B8C\u5168\u986F\u793A.";
	}
	logMessage += COLOR_1 + "\n --------------------------------------------------";

	SendCopyData(" D2NT Manager ", null, 7 << 16, " 2." + COLOR_1 + " \u9003\u547D\u89F8\u767C\u767C\u751F\u65BC(" + areaName + ")" +";"+logMessage);
	SendCopyData("D2NT Manager", null, 7<<16, logMessage);
}

// Code from kolton's Hostile Catch scripts, augmented for millisecond output
// Added to a common file for global access
function NTU_timeStamp()
{
   var now    = new Date();
   var hour   = now.getHours();
   var minute = now.getMinutes();
   var second = now.getSeconds();
   var millisecond = now.getMilliseconds();
   var DoN = "AM";

	if (hour > 11) { DoN = "PM"; }
	if (hour > 12) { hour = hour - 12; }
	if (hour == 0) { hour = 12; }
	if (hour < 10) { hour = "0" + hour; }
	if (minute < 10) { minute = "0" + minute; }
	if (second < 10) { second = "0" + second; }

	var timeString = hour +	':' +  minute + ':' + second + '.' + millisecond + " " + DoN;

   return timeString;
}

// loosely based on NTBaal.ntj function _announceTMobs
function NTU_GetNearbyMonsters(_range) {
	var _nearbyMonsters = [];

	if(arguments.length < 1)
		var _range = 50;

	var _monster = NTC_FindUnit(NTC_UNIT_MONSTER);

	if(_monster){
		do {
			if ((!_inRange(me.x, me.y, _monster.x, _monster.y, _range)) || (!_monster.IsAttackable()))
				continue;
			_nearbyMonsters.push(_monster.name);
		} while(_monster.GetNext())
	}

	_nearbyMonsters = _simplifyArray(_nearbyMonsters);

	function _inRange(meX, meY, monX, monY, range) {
		// In an x-y Cartesian coordinate system, the circle with centre coordinates (a, b)
		// and radius r is the set of all points (x, y) such that
		// (x - a)^2 + (y - b)^2 = r^2
		if(Math.pow((monX - meX),2) + Math.pow((monY - meY),2) > Math.pow(range,2)) {
			return false;
		} else {
			return true;
		}
	}

	// removes duplicate entries
	function _simplifyArray(ar) {
		var f = {},
		i = 0,
		l = ar.length,
		r = [];
		while (i < l) {
			!f[ar[i]] && r.push(ar[i]);
			f[ar[i++]] = 1;
		}
		return r;
	}
	return _nearbyMonsters;
}

function LeechBo_First()
{
// Leech Bo script
LeechMode = true;
var LeaderInGame = false;
var return_town = me.areaid;
var _BO = false;
var _HP = me.hp;
var next = 0;
var _MyPartyid;
var __x;
var __y;
SetStatusText(COLOR_0 + Rev + COLOR_3 + Lang_Running + COLOR_2 + Lang_TeamBo);
	var __Player = GetPlayerUnit();
	var _BAR = 'none';
	var j=__Player.length;
	var _player;
	if(__Player) {	// Wait for team-member join this game.
		var _NTTMGR_DoHeal = NTT_CheckHeal();
		if(_NTTMGR_DoHeal) {
			switch(me.act) {
				case 1:
					NTTMGR_VisitAkara();
					break;
				case 2:
					NTTMGR_VisitFara();
					break;
				case 3:
					NTTMGR_VisitOrmus();
					break;
				case 4:
					NTTMGR_VisitJamella();
					break;
				case 5:
					NTTMGR_VisitMalah();
					break;
			}
		}
		var _msg = NT_File("logs/messagecomands/teambo.txt", 0);
		if(_msg && (_msg.indexOf(me.charname) != -1)) {	// Lerder
			Delay(500);
			if(!NTM_TakeWaypoint(35)){
				NTC_SendMsgToScript("NTBotGame.ntj", "NTM_TakeWaypoint()");
				return;
			}
			Delay(3000);
			// Check if BARBARIAN exist
			_MyPartyid = __Player.partyid;
			while(__Player.GetNext()){
				if(__Player.partyid == _MyPartyid) {
					// Player already join. check level.
					if((__Player.classid == NTC_CHAR_CLASS_BARBARIAN) && (__Player.level >= 30))
						_BAR = __Player.name;
				}
				if((__Player.name == NTConfig_Leader) && (__Player.name != me.charname))
					LeaderInGame = true;
			}
			__x=me.x;
			__y=me.y;
			if(me.classid == NTC_CHAR_CLASS_BARBARIAN) {
				Say("\u5925\u4F34\u5011!! \u6211\u9592\u8457\u6C92\u4E8B\u60F3\u9B3C\u543C\u4E00\u756A. \u8981\u4F86\u53C3\u52A0\u55CE?");
				Say("ACT-1: Team-BO!!");
				NT_File("logs/messagecomands/teambo.txt", 1, me.charname+"\n"+"waypoint")
				NTM_MoveTo(me.areaid, __x+5, __y);
				NTM_MakeTP();
				Delay(500);
				NT_BoPrecast(500,20);
			} else if((me.classid == NTC_CHAR_CLASS_SORCERESS) && (me.GetSkill(52).level >= 1)) {
				NTM_MoveTo(me.areaid, __x+5, __y);
				NTM_MakeTP();
				NT_DoEnchant(20);
			} else {
				NTM_MoveTo(me.areaid, __x+5, __y);
				var _bostr = " \u6C92\u4E8B\u4F86\u9B3C\u53EB\u5E7E\u8072\u5427!!";
				if(_BAR != 'none') {
					Say("\u91CE\u4EBA: ["+_BAR + "]"+ _bostr);
				}
				else {
					Say(_bostr);
				}
				Delay(100);
				NT_File("logs/messagecomands/teambo.txt", 1, me.charname+"\n"+"waypoint");
				NTM_MakeTP();
				Say("ACT-1: Team-BO!!");
				next = 0;
				do {
					if(me.hp > _HP) {
						Delay(500);
						Say("! \u7070\u718A\u809D\u90AA\u7C92\u5566!!");
						Delay(5000);
						_BO = true;
						next = 25;
					}
					else {
						Delay(800);
						next++;
					}
				} while (next <20);
			}
			NT_File("logs/messagecomands/teambo.txt", 1, me.charname);
		} else {	// Team Member
			_Msg = NT_File("logs/messagecomands/"+me.charname+"-teambo.txt", 0);
			if(!NTM_TakeWaypoint(35)){
				NTC_SendMsgToScript("NTBotGame.ntj", "NTM_TakeWaypoint()");
				Say("\u6211\u597D\u50CF\u6C92\u6709 \"\u5893\u7A74\u5730\u4E0B\u7B2C\u4E8C\u5C64\"\u7684\u50B3\u9001\u9EDE.");
				NTTM_CheckAct(1);
				NTTM_TownMove("portalspot")
				if(!NTM_UsePortal("BluePortal", 35, NTConfig_Leader))
					return;
			}
			__x=me.x;
			__y=me.y;
			if(me.classid == NTC_CHAR_CLASS_BARBARIAN)	{
				Say("\u5925\u4F34\u5011!! \u6211\u9592\u8457\u6C92\u4E8B\u60F3\u9B3C\u543C\u4E00\u756A. \u8981\u4F86\u53C3\u52A0\u55CE?");
				Say("ACT-1: Team-BO!!");
				NT_File("logs/messagecomands/teambo.txt", 1, me.charname+"\n"+"waypoint")
				NTM_MoveTo(me.areaid, __x+5, __y);
				Delay(500);
				NT_BoPrecast(500,20);
				NT_File("logs/messagecomands/teambo.txt", 1, " ")
			} else if((me.classid == NTC_CHAR_CLASS_SORCERESS) && (me.GetSkill(52).level >= 1)) {
				NTM_MoveTo(me.areaid, __x+5, __y);
				NT_DoEnchant(20);
			} else {
				NTM_MoveTo(me.areaid, __x+5, __y);
				Delay(100);
				next = 0;
				do {
					if(me.hp > _HP) {
						Delay(500);
						Say("! \u7070\u718A\u809D\u90AA\u7C92\u5566!!");
						Delay(5000);
						_BO = true;
						next = 25;
					}
					else {
						Delay(500);
						next++;
					}
				} while (next <20);
			}
			NT_File("logs/messagecomands/"+me.charname+"-teambo.txt", 1, " ");
		}
	}
	if(!NTM_TakeWaypoint(return_town)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_TakeWaypoint()");
		return;
	}
	NTTMGR_TownManager();
	Delay(2000);
// END of Leech Bo script
}

function NT_BoPrecast(delay, times) {
	if(times) {
		for(var i=0; i<times; i++) {
			var _player = NTC_FindUnit(NTC_UNIT_PLAYER);
			if (_player) {
				if(_player.name == me.charname)
					_player.GetNext();
				NTM_MoveTo(me.areaid, _player.x-1, _player.y-1);
				Delay(200);
				NTP_DoPrecast();
				if(_player.name != me.charname && _player.name != 'undefined')
					Say("! \u641E\u5B9A ==> " + _player.name);
			}
			if(delay)
				Delay(delay);
			else
				Delay(500);
			_player = null;
		}
	} else {
		var _player = NTC_FindUnit(NTC_UNIT_PLAYER);
		if (_player) {
			//do {
				NTM_MoveTo(me.areaid, _player.x-1, _player.y-1);
				NTP_DoPrecast();
				if(_player.name != me.charname && _player.name != 'undefined')
					Say("! \u641E\u5B9A ==> " + _player.name);
			//} while (_player.GetNext());
		}
	}
}

function NT_DoEnchant(count)
{
	var _player;
	var _EN = false;
	var _count = 0;
	var _CountEnd = 20;
	if(count) _CountEnd = count;
	do {
		_player = NTC_FindUnit(NTC_UNIT_PLAYER);
		_unit = NTC_FindUnit(NTC_UNIT_MERC);
		if (_player) {
			do {
				if (GetDistance(me, _player) < 35) {
					NTC_CastSkill(52, NTC_HAND_RIGHT, _player);
				}
				if (_unit) {
					if (GetDistance(me, _unit) < 35) {
						NTC_CastSkill(52, NTC_HAND_RIGHT, _unit);
					}
				}
				_count++;
				if(_count >= _CountEnd) {
					_EN = true;
				}
			} while (_player.GetNext());
			Delay(500);
		}
	} while (!_EN);
}

function NT_DoEnchantMerc()
{
	var _unit;
		_unit = NTC_FindUnit(NTC_UNIT_MERC);
	if (_unit)
	{
		do
		{
			if (GetDistance(me, _unit) < 35)
			{
				NTC_CastSkill(52, NTC_HAND_RIGHT, _unit);
			}
		} while (_unit.GetNext());
	}
}