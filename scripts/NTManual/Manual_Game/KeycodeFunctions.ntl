/* =====================================================
 *
 * KeycodeFunctions.ntl , a manual-game function call script, based on ETal 1.33WW
 *
 * Any original code is licensed under the BSD license
 * All code written since the fork of this is licensed under the GPL
 * Please see COPYING for details
 *
 * Copyright (c) 2014, Benson's Network Technolygy Company.
 * Copyright (c) 1976-2014 Benson's Network Technolygy Company.
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * KeycodeFunctions.ntl, 一個手動遊戲功能呼叫腳本, 根據 ETal 1.33WW 相容版本修訂
 *
 * 任何原代碼在BSD許可證下授權
 * 自本次寫的所有代碼以GPL許可
 * 請參閱COPYING的詳細信息
 *
 * 版權所有(c) 2014年, Benson's Network Technolygy Company.
 * 版權所有(c) 1976至2014 Benson's Network Technolygy Company.
 * 保留所有權利。
 *
 * 本程序是自由軟件：您可以重新分配和/或修改
 * 它根據GNU通用公共許可證的條款發表
 * 自由軟件基金會，無論是版本3的使用授權，或
 * (由你選擇) 任何更新的版本。
 *
 * 本程序分發的目的是希望它有用，
 * 但"沒有任何擔保"; 甚至沒有暗示的保證
 * 適銷性或針對特定用途。請參閱
 * GNU通用公共許可證以獲得更多細節。
 * 你應該已經收到一份GNU通用公共許可證的副本
 * 隨著這一計劃。如果不是，請參閱<http://www.gnu.org/licenses/>。
 *
===================================================== */

// NTManualGame functions

function StackedRes()
{
	Print(COLOR_1 + "\u706B\u7130\u62B5\u6297: " + Resi[0] + COLOR_4 + " - " + COLOR_3 + "\u51B0\u51B7\u62B5\u6297: " + Resi[1] + COLOR_4 + " - " + COLOR_9 + "\u9583\u96FB\u62B5\u6297: " + Resi[2] + COLOR_4 + " - " + COLOR_2 + "\u6BD2\u7D20\u62B5\u6297: " + Resi[3]);
}

function FCRPlusPrint()
{
	Print(COLOR_4 + "\u9AD8\u901F\u65BD\u5C55\u901F\u5EA6(" + COLOR_1 + me.GetStat(105) + COLOR_4 + ") \u5FEB\u901F\u6253\u64CA\u6062\u5FA9(" + COLOR_1 + me.GetStat(99) + COLOR_4 + ") \u653B\u64CA\u901F\u5EA6\u63D0\u6607(" + COLOR_1 + me.GetStat(93) + COLOR_4 + ") %\u50B7\u5BB3\u6E1B\u5C11(" + COLOR_1 + me.GetStat(36) + COLOR_4 + ") %\u9B54\u6CD5\u50B7\u5BB3\u6E1B\u5C11(" + COLOR_1 + me.GetStat(37) + COLOR_4 + ")");
}

function SorbPrint()
{
	Print(COLOR_4 + "\u5438\u6536: " + COLOR_1 + "\u706B\u7130 " + me.GetStat(143) + COLOR_4 + "(" + COLOR_1 + me.GetStat(142) +
		  COLOR_4 + "%) " + COLOR_9 + "\u9583\u96FB " + me.GetStat(145) + COLOR_4 + "(" + COLOR_9 + me.GetStat(144) +
		  COLOR_4 + "%) " + COLOR_0 + "\u9B54\u6CD5 " + me.GetStat(147) + COLOR_4 + "(" + COLOR_0 + me.GetStat(146) +
		  COLOR_4 + "%) " + COLOR_3 + "\u51B0\u51B7 "  + me.GetStat(149) + COLOR_4 + "(" + COLOR_3 + me.GetStat(148) + COLOR_4 + "%)");
}

function Do_KeyHotList()
{
	var MercOnOrNo = (!NTConfig_MercStats) ? "" : " (\u542B\u50AD\u5175)";

	var HotKeys = COLOR_8 + "\u624B\u52D5\u904A\u6232\u71B1\u9375" + ";";
	HotKeys += COLOR_1 + "---------------------------------------------------" + "\n";
	if(MGConfig_PickItems && !MGConfig_PickAuto) HotKeys += COLOR_2 + "[" + WhichHotKey(Key_PickItems) + "]" + COLOR_4 + " \u958B\u59CB\u62FE\u53D6\u7269\u54C1!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_HotKeyInfo) + "]" + COLOR_4 + " \u767C\u9001\u71B1\u9375\u5217\u8868\u5230\u60A8\u7684\u904A\u6232\u7BA1\u7406\u5668" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_ExitGame) + "]" + COLOR_4 + " \u9000\u51FA\u904A\u6232\u4E26\u5C31\u50CF\u666E\u901A\u7684BOT\u767C\u9001\u7D71\u8A08\u904A\u6232" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_GoToTown) + "]" + COLOR_4 + " \u56DE\u5230\u6700\u8FD1\u7684\u57CE\u93AE" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_DoPrecast) + "]" + COLOR_4 + " \u9810\u5148\u505A\u4F60\u7684\u5F37\u5316\u6280\u80FD" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_HiddenStats) + "]" + COLOR_4 + " \u6297\u6027, \u9AD8\u901F\u65BD\u6CD5, \u6253\u64CA\u6062\u5FA9, \u653B\u64CA\u901F\u5EA6, %\u6E1B\u50B7, %\u9B54\u6CD5\u6E1B\u50B7, \u4EE5\u53CA\u5438\u6536!" + "\n";

	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_Breakpoints) + "]" + COLOR_4 + " Get your BPs for your character class" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_MyChicken) + "]" + COLOR_4 + " \u986F\u793A\u4F60\u7684\u9003\u547D\u6578\u503C HP/MP" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_ClearPosition) + "]" + COLOR_4 + " \u6E05\u9664\u9644\u8FD1\u5340\u57DF\u602A\u7269." + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_NextWaypoint) + "]" + COLOR_4 + " \u81EA\u52D5\u5230\u4E0B\u4E00\u500B\u50B3\u9001\u9EDE(WP)!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_POI) + "]" + COLOR_4 + " \u81EA\u52D5\u5230\u4E0B\u4E00\u500B\u6D3B\u52D5\u9EDE (POI)!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_InvStashCheck) + "]" + COLOR_4 + " \u6AA2\u67E5\u8EAB\u4E0A\u80CC\u5305/\u6697\u85CF\u7A7A\u4F4D!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_GameStats) + "]" + COLOR_4 + " \u767C\u9001\u4F60\u7576\u524D\u904A\u6232\u7684\u7D71\u8A08\u5230\u904A\u6232\u7BA1\u7406\u5668." + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_CharStats) + "]" + COLOR_4 + " \u767C\u9001\u4F60\u7576\u524D\u904A\u6232\u7684\u5C6C\u6027\u72C0\u614B\u5230\u904A\u6232\u7BA1\u7406\u5668." + MercOnOrNo + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_AntiIdle) + "]" + COLOR_4 + " \u9632\u9592\u7F6E\u529F\u80FD \u958B/\u95DC" + "\n";
	HotKeys += COLOR_1 + "---------------------------------------------------";
	MG_LogToOOG(NTC_LOG_COMMON, HotKeys);
}

function HeadingHome()
{
	if(me.areaid >= 2 && me.areaid <= 39) {
		NTTM_CheckAct(1);
	}
	else if(me.areaid >= 40 && me.areaid <= 74) {
		NTTM_CheckAct(2);
	}
	else if(me.areaid >= 75 && me.areaid <= 102) {
		NTTM_CheckAct(3);
	}
	else if(me.areaid >= 103 && me.areaid <= 108) {
		NTTM_CheckAct(4);
	}
	else if(me.areaid >= 109) {
		NTTM_CheckAct(5);
	}
}

function MG_CheckFreeInventorySpace(PrintToScreen) {
	var i, x, y;
	var itemsInventory;

	if(arguments.length == 0) { PrintToScreen = false; }
	else { PrintToScreen = true; }

	var inventorySpace = new Array(4);

	for(y = 0 ; y < 4 ; y++) {
		inventorySpace[y] = new Array(10);
	}
	for(y = 0 ; y < 4 ; y++) {
		for(x = 0 ; x < 10 ; x++) {
			inventorySpace[y][x] = 0;
		}
	}

	itemsInventory = me.GetItems();

	if(!itemsInventory) {
		return false;
	}
	var totalUsedSpace = 0;
	for(i = 0 ; i < itemsInventory.length ; i++) {
		if(itemsInventory[i].mode == 0 && itemsInventory[i].itemloc == 0) {
			if(itemsInventory[i].classid == 605 && itemsInventory[i].quality == 7) { // id's where gheeds is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 5;
						totalUsedSpace++;
				}
			}
			else if(itemsInventory[i].classid == 603 && itemsInventory[i].quality == 7) { // id's where the anni is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 4;
						totalUsedSpace++;
				}
			}
			else if(itemsInventory[i].classid == 604 && itemsInventory[i].quality == 7) { // id's where the torch is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 3;
						totalUsedSpace++;
				}
			}
			else if(itemsInventory[i].classid == 549) { // id's where the cube is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 2;
						totalUsedSpace++;
				}
			}
			else { // this will be unlocked full
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 1;
						totalUsedSpace++;
				}
			}
		}
	}
	var totalFreeSpace = 40 - totalUsedSpace;
		var InvMangPrint = "";
	if(PrintToScreen) {
		if(InvChecking == "Game") Print(" ");
		if(InvChecking == "Game") Print(COLOR_8 + "\u80CC\u5305: ");
			InvMangPrint += COLOR_8 + "\u7A7A\u4F4D\u6AA2\u67E5 -" + COLOR_5 + " \u80CC\u5305" + ";";
			InvMangPrint += COLOR_1 + "--------------------------------------" + "\n";
			InvMangPrint += COLOR_4 + "\u7A7A\u683C: \u53EF\u7528 (" + COLOR_8 + totalFreeSpace + COLOR_4 + ") \u5DF2\u7528 (" + COLOR_8 + totalUsedSpace + COLOR_4 + ")" + "\n";
		for(y = 0 ; y < 4 ; y++) {
			var printSpace = [];
			for(x = 0 ; x < 10 ; x++) {
				switch(inventorySpace[y][x]) {
					case 0: // unlocked empty
						printSpace.push(COLOR_2 + "O")
						break;
					case 1: // unlocked full
						printSpace.push(COLOR_1 + "X")
						break;
					case 2: // where the cube is
						printSpace.push(COLOR_4 + "C")
						break;
					case 3: // where the torch is
						printSpace.push(COLOR_4 + "T")
						break;
					case 4: // where the anni is
						printSpace.push(COLOR_4 + "A")
						break;
					case 5: // where Gheeds is
						printSpace.push(COLOR_4 + "G")
						break;
				}
			}
			if(InvChecking == "Game") Print(COLOR_4 + "|" + printSpace + COLOR_4 + "|");
			InvMangPrint += COLOR_4 + "|" + printSpace + COLOR_4 + "|" + "\n";
		}
		if(InvChecking == "Game") Print(COLOR_8 + "\u5269\u9918\u7A7A\u4F4D = " + totalFreeSpace + ", \u4F7F\u7528\u7A7A\u683C = " + totalUsedSpace);
		InvMangPrint += COLOR_8 + "\u80CC\u5305\u9EC3\u91D1: " + COLOR_4 + InvGold + "\n";
		InvMangPrint += COLOR_1 + "--------------------------------------";
		if(InvChecking == "Mgr") {
			Print(COLOR_4 + "\u8EAB\u4E0A\u7A7A\u4F4D\u6AA2\u67E5\u5DF2\u50B3\u9001\u81F3\u904A\u6232\u7BA1\u7406\u5668!");
			MG_LogToOOG(NTC_LOG_COMMON, InvMangPrint);
		}
	}
	return totalFreeSpace;
}

var StashGold = addSeparatorsNF(me.GetStat(15), ",", ".", ",");
var InvGold = addSeparatorsNF(me.GetStat(14), ",", ".", ",");

function MG_CheckFreeStashSpace(PrintToScreen) {

	var i, x, y;
	var itemsStash;
	var StashHeight = (me.gametype == 0) ? 4 : 8;

	if(arguments.length == 0) { PrintToScreen = false; }
	else { PrintToScreen = true; }

	var _stashspace = new Array(StashHeight);
	for(y = 0 ; y < StashHeight ; y++) {
		_stashspace[y] = new Array(6);
	}

	for(y = 0 ; y < StashHeight ; y++) {
		for(x = 0 ; x < 6 ; x++) {
			_stashspace[y][x] = 0;
		}
	}

	itemsStash = me.GetItems();

	if(!itemsStash) {
		return false;
	}
	var totalUsedSpace = 0;
	for(i = 0 ; i < itemsStash.length ; i++) {
		if(itemsStash[i].mode == 0 && itemsStash[i].itemloc == 4) {
			if(itemsStash[i].classid == 549) { // id's where the cube is
				for(y = 0 ; y < itemsStash[i].ysize ; y++) {
					for(x = 0 ; x < itemsStash[i].xsize ; x++) {
						_stashspace[y+itemsStash[i].y][x+itemsStash[i].x] = 2;
						totalUsedSpace++
					}
				}
			} else {
				for(y = 0 ; y < itemsStash[i].ysize ; y++) {
					for(x = 0 ; x < itemsStash[i].xsize ; x++) {
						_stashspace[y+itemsStash[i].y][x+itemsStash[i].x] = 1;
						totalUsedSpace++
					}
				}
			}
		}
	}
	var totalFreeSpace = (48 - totalUsedSpace);
	var StashMangPrint = "";
	if(PrintToScreen) {
		if(StashChecking == "Game") Print(COLOR_8 + "\u79C1\u4EBA\u5132\u85CF\u7BB1: ");
		StashMangPrint += COLOR_8 + "\u7A7A\u4F4D\u6AA2\u67E5 - " + COLOR_5 + "\u79C1\u4EBA\u5132\u85CF\u7BB1" + ";";
		StashMangPrint += COLOR_1 + "--------------------------------------" + "\n";
		StashMangPrint += COLOR_4 + "\u7A7A\u683C: \u53EF\u7528 (" + COLOR_8 + totalFreeSpace + COLOR_4 + ") \u5DF2\u7528 (" + COLOR_8 + totalUsedSpace + COLOR_4 + ")" + "\n";
		for(y = 0 ; y < StashHeight ; y++) {
			var printSpace = [];
			for(x = 0 ; x < 6 ; x++) {
				switch(_stashspace[y][x]) {
					case 0:
						printSpace.push(COLOR_2 + "O")
						break;
					case 1:
						printSpace.push(COLOR_1 + "X")
						break;
					case 2:
						printSpace.push(COLOR_4 + "C")
						break;
				}
			}
			if(StashChecking == "Game") Print(COLOR_4 + "|" + printSpace + COLOR_4 + "|");
			StashMangPrint += COLOR_4 + "|" + printSpace + COLOR_4 + "|" + "\n";
		}
		if(StashChecking == "Game") Print(COLOR_8 + "\u53EF\u7528\u7A7A\u4F4D = " + totalFreeSpace + ", \u4F7F\u7528\u7A7A\u683C = " + totalUsedSpace);
		StashMangPrint += COLOR_8 + "\u79C1\u4EBA\u5132\u85CF\u7BB1\u9EC3\u91D1: " + COLOR_4 + StashGold + "\n";
		StashMangPrint += COLOR_1 + "--------------------------------------";
		if(StashChecking == "Mgr") {
			Print(COLOR_4 + "\u79C1\u4EBA\u5132\u85CF\u7BB1\u7A7A\u4F4D\u6AA2\u67E5\u5DF2\u50B3\u9001\u81F3\u904A\u6232\u7BA1\u7406\u5668!");
			MG_LogToOOG(NTC_LOG_COMMON, StashMangPrint);
		}
	}
	return totalFreeSpace;
}

var AntiIdleAct = ["\u863F\u683C\u71DF\u5730", "\u9B6F.\u9AD8\u56E0", "\u5EAB\u62C9\u65AF\u7279\u6D77\u6E2F", "\u7FA4\u9B54\u5821\u58D8", "\u54C8\u6D1B\u52A0\u65AF"];
var AntiIdleActE = [" \u901B\u4E00\u4E0B", " \u8D70\u4E00\u5708", " \u7E5E\u4E00\u7E5E", " \u6643\u6643", " \u5DE1\u8996\u4E00\u756A"];
var AntiIdleActPreMsg = ["\u6211\u60F3\u8981\u98DB\u5230 ", "\u6211\u8981\u50B3\u9001\u5230 ", "\u5982\u679C\u6211\u53BB ", "\u6211\u5C31\u53EA\u60F3\u53BB ", "\u55E8, \u54B1\u5011\u53BB "];
var AntiIdleAct1 = ["\u85CF\u5BF6\u7BB1","\u5361\u590F", "\u57FA\u5F97", "\u6070\u897F", "\u963F\u5361\u62C9", "\u74E6\u745E\u592B"];
var AntiIdleAct2 = ["\u85CF\u5BF6\u7BB1","\u96F7\u5C71\u5FB7", "\u51F1\u6069", "\u6CD5\u62C9", "\u5353\u683C\u5357", "\u4E9E\u7279\u746A"];
var AntiIdleAct3 = ["\u85CF\u5BF6\u7BB1","\u8D6B\u62C9\u9435\u529B", "\u51F1\u6069", "\u827E\u67EF", "\u5967\u99AC\u65AF", "\u99AC\u5E2D\u592B"];
var AntiIdleAct4 = ["\u85CF\u5BF6\u7BB1", "\u51F1\u6069", "\u6D77\u723E\u5E03", "\u6CF0\u745E\u723E", "\u8CC8\u6885\u62C9", "\u6CF0\u745E\u723E"];
var AntiIdleAct5 = ["\u85CF\u5BF6\u7BB1", "\u51F1\u6069", "\u746A\u62C9", "\u62C9\u8607\u514B", "\u5938\u723E\u51F1\u7279", "\u746A\u62C9"];
var AntiIdlePreMsg = ["!\u6211\u53BB\u62DC\u8A2A\u4E00\u4E0B ", "!\u4F60\u597D\u50CF\u4E0D\u600E\u9EBC\u9AD8\u8208\u5594 ", "!\u60F3\u807D\u807D\u82F1\u96C4\u6545\u4E8B\u55CE? ", "!\u563F! \u6211\u6C92\u898B\u5230\u4F60\u8036 ", "!\u4F60\u5230\u5E95\u662F\u4E0D\u662F ", "!\u5582 \u4F60\u6B20\u7684\u8CED\u50B5\u8A72\u9084\u4E86\u5427 ", "!\u4F60\u4E0D\u662F\u8981\u7D66\u6211\u8D85\u7D1A\u88DD\u5099\u55CE? "];

var AntiIdleAct1Area = ["stash","kashya", "gheed", "charsi", "akara", "warriv"];
var AntiIdleAct2Area = ["stash","lysander", "cain", "fara", "drognan", "atma"];
var AntiIdleAct3Area = ["stash", "hratli", "cain", "alkor", "ormus", "meshif"];
var AntiIdleAct4Area = ["stash", "cain", "halbu", "tyrael", "jamella", "tyrael"];
var AntiIdleAct5Area = ["stash", "cain", "malah", "larzuk", "qual-kehk", "malah"];

var WeGonnaChangeAct = Random(0,5);
function MG_AntiIdle()
{
	while (me.areaid != 0 && MGAntiIdle){
		NTC_PingDelay(3000);
		t = Random(0,5);
		abcde = Random(0,6);

		if(WeGonnaChangeAct == undefined){
			WeGonnaChangeAct = 0;
		} else if(WeGonnaChangeAct == 5){
			qrstu = Random(1,5);
			vwxyz = Random(0,4);
			wwxyz = Random(0,4);
			Say(AntiIdleActPreMsg[vwxyz] + AntiIdleAct[qrstu-1] + AntiIdleActE[wwxyz]);
			if(!NTTM_CheckAct(qrstu)){
				Say("\u6211\u60F3\u60F3\u9084\u662F\u4E0D\u8981\u53BB " + AntiIdleAct[qrstu-1] + "\u4E86");
				NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_CheckAct()");
				return;
			}
			WeGonnaChangeAct = Random(0,5);
		} else{
			WeGonnaChangeAct++;
		}

		switch(me.areaid){
			case 1:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct1[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct1Area[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
				break;
			case 40:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct2[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct2Area[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
				break;
			case 75:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct3[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct3Area[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
				break;
			case 103:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct4[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct4Area[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
				break;
			case 109:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct5[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct5Area[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
			break;
		}
		Delay(Random(2000,5000));
	}
}